<div class="w3-row">
  <div class="w3-col l8 m10 s12 w3-center-align" style="margin: 0 auto; float: none;">
    <!-- Header Card -->
    <div class="w3-card-4 w3-blue w3-margin-bottom">
      <div class="w3-container w3-center w3-padding-32">
        <h1 class="w3-xxxlarge"><i class="fas fa-microphone"></i> Esther - Scheduling Assistant</h1>
        <p class="w3-large">Mike Lawrence Productions Gospel Outreach Program</p>
        <p class="w3-opacity">Website: globaloutreachevent.com | Phone: 347-300-5533</p>
      </div>
    </div>

    <!-- Main Control Card -->
    <div class="w3-card-4 w3-white w3-margin-bottom">
      <div class="w3-container w3-padding-16">
        <!-- Connection Status -->
        <div id="connection-status" class="w3-center w3-margin-bottom">
          <span class="status disconnected w3-tag w3-red w3-round">
            <i class="fas fa-circle"></i> Connecting...
          </span>
        </div>
        
        <!-- Recording Controls -->
        <div class="w3-center w3-margin-bottom">
          <button id="record-button" class="w3-button w3-blue w3-large w3-round-large w3-hover-indigo">
            <i class="fas fa-microphone"></i> Start Recording
          </button>
        </div>
        
        <!-- Error Messages -->
        <div id="error-message" class="w3-panel w3-pale-red w3-leftbar w3-border-red w3-hide"></div>
      </div>
    </div>
    
    <!-- Esther's Response Card -->
    <div class="w3-card-4 w3-white w3-margin-bottom">
      <header class="w3-container w3-light-grey">
        <h3><i class="fas fa-comment-dots"></i> Esther says:</h3>
      </header>
      <div class="w3-container w3-padding-16">
        <div id="esther-response" class="w3-text-grey" style="min-height: 60px;">
          Ready to help you schedule a meeting with Mike Lawrence...
        </div>
      </div>
    </div>
    
    <!-- Status -->
    <div id="status" class="w3-center w3-margin-bottom w3-text-grey"></div>
    
    <!-- Transcript Card -->
    <div class="w3-card-4 w3-white">
      <header class="w3-container w3-light-grey">
        <h3><i class="fas fa-file-alt"></i> Conversation Transcript</h3>
      </header>
      <div class="w3-container w3-padding-16">
        <div id="transcript" class="w3-code w3-small" style="min-height: 120px; white-space: pre-wrap;"></div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Custom styles for W3.CSS integration */
  .status.connected {
    background-color: #4CAF50 !important;
  }
  
  .status.disconnected {
    background-color: #f44336 !important;
  }
  
  #record-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .w3-center-align {
    display: block;
  }
</style>

<script>
  let mediaRecorder;
  let audioChannel;
  let consumer;

  async function startConversation() {
    try {
      updateStatus("Requesting microphone access...");
      
      // Request microphone access with Nova Sonic optimal settings
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          sampleRate: 16000,      // Nova Sonic prefers 16kHz
          channelCount: 1,        // Mono audio
          sampleSize: 16,         // 16-bit audio
          echoCancellation: true, // Improve audio quality
          noiseSuppression: true, // Reduce background noise
          autoGainControl: true   // Normalize audio levels
        } 
      });
      
      // Try to use a compatible audio format for Nova Sonic
      let mimeType = 'audio/webm;codecs=opus';
      if (!MediaRecorder.isTypeSupported(mimeType)) {
        mimeType = 'audio/webm';
      }
      if (!MediaRecorder.isTypeSupported(mimeType)) {
        mimeType = 'audio/wav';
      }
      
      console.log(`Using audio format: ${mimeType}`);
      mediaRecorder = new MediaRecorder(stream, { mimeType });

      updateStatus("Connecting to server...");
      
      // Import ActionCable and create consumer
      const { createConsumer } = await import('@rails/actioncable');
      consumer = createConsumer();
      
      // Subscribe to AudioStreamChannel
      audioChannel = consumer.subscriptions.create("AudioStreamChannel", {
        connected() {
          updateStatus("Connected! You can start speaking...");
          console.log("Connected to AudioStreamChannel");
        },

        disconnected() {
          updateStatus("Disconnected from server");
          console.log("Disconnected from AudioStreamChannel");
        },

        received(data) {
          console.log("Received data:", data);
          
          if (data.message && data.message.audio) {
            playAudio(data.message.audio);
          }
          
          if (data.message && data.message.text) {
            addToTranscript(`Assistant: ${data.message.text}`);
          }
          
          if (data.error) {
            addToTranscript(`Error: ${data.error}`);
            updateStatus(`Error: ${data.error}`);
          }
        }
      });

      // Send audio chunks
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0 && audioChannel) {
          const reader = new FileReader();
          reader.onload = () => {
            audioChannel.send({ audio: reader.result.split(',')[1] });
          };
          reader.readAsDataURL(event.data);
        }
      };

      mediaRecorder.start(100); // Send audio every 100ms
      document.getElementById('start-btn').disabled = true;
      document.getElementById('stop-btn').disabled = false;
      
    } catch (error) {
      console.error("Error starting conversation:", error);
      updateStatus(`Error: ${error.message}`);
    }
  }

  function stopConversation() {
    if (mediaRecorder) {
      mediaRecorder.stop();
      mediaRecorder.stream.getTracks().forEach(track => track.stop());
    }
    
    if (audioChannel) {
      audioChannel.unsubscribe();
    }
    
    if (consumer) {
      consumer.disconnect();
    }
    
    document.getElementById('start-btn').disabled = false;
    document.getElementById('stop-btn').disabled = true;
    updateStatus("Conversation stopped");
  }

  function playAudio(base64Audio) {
    try {
      console.log("Playing audio, base64 length:", base64Audio.length);
      
      // Decode base64 to binary data
      const audioData = atob(base64Audio);
      const audioBytes = new Uint8Array(audioData.length);
      for (let i = 0; i < audioData.length; i++) {
        audioBytes[i] = audioData.charCodeAt(i);
      }
      
      console.log("Audio bytes length:", audioBytes.length);
      
      // Create WAV header for 16kHz 16-bit mono PCM
      const sampleRate = 16000;
      const numChannels = 1;
      const bitsPerSample = 16;
      const dataLength = audioBytes.length;
      const headerLength = 44;
      
      const wav = new ArrayBuffer(headerLength + dataLength);
      const view = new DataView(wav);
      
      // WAV header
      view.setUint32(0, 0x52494646); // "RIFF"
      view.setUint32(4, dataLength + headerLength - 8, true);
      view.setUint32(8, 0x57415645); // "WAVE"
      view.setUint32(12, 0x666d7420); // "fmt "
      view.setUint32(16, 16, true); // PCM format size
      view.setUint16(20, 1, true); // PCM format
      view.setUint16(22, numChannels, true);
      view.setUint32(24, sampleRate, true);
      view.setUint32(28, sampleRate * numChannels * bitsPerSample / 8, true);
      view.setUint16(32, numChannels * bitsPerSample / 8, true);
      view.setUint16(34, bitsPerSample, true);
      view.setUint32(36, 0x64617461); // "data"
      view.setUint32(40, dataLength, true);
      
      // Copy audio data
      const wavBytes = new Uint8Array(wav);
      wavBytes.set(audioBytes, headerLength);
      
      const audioBlob = new Blob([wav], { type: 'audio/wav' });
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      
      audio.onloadeddata = () => console.log("Audio loaded successfully");
      audio.onerror = (e) => console.error("Audio error:", e);
      
      audio.play().then(() => {
        console.log("Audio playback started");
      }).catch(e => {
        console.error("Error playing audio:", e);
        // Try alternative playback
        audio.load();
        audio.play();
      });
      
      // Clean up URL after playback
      audio.onended = () => URL.revokeObjectURL(audioUrl);
      
    } catch (error) {
      console.error("Error in playAudio:", error);
    }
  }

  function addToTranscript(text) {
    const transcript = document.getElementById('transcript');
    transcript.textContent += text + '\n';
    transcript.scrollTop = transcript.scrollHeight;
  }

  function updateStatus(message) {
    document.getElementById('status').textContent = message;
  }

  document.getElementById('start-btn').addEventListener('click', startConversation);
  document.getElementById('stop-btn').addEventListener('click', stopConversation);
</script>