<!DOCTYPE html>
<html>
<head>
  <title>Prompt Management - NovaVoice</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
    .container { max-width: 1200px; margin: 0 auto; }
    h1 { color: #333; }
    .filters { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .filters label { margin-right: 15px; font-weight: bold; }
    .filters select, .filters input { margin-right: 20px; padding: 5px; }
    table { width: 100%; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    th { background: #4CAF50; color: white; padding: 12px; text-align: left; }
    td { padding: 12px; border-bottom: 1px solid #ddd; }
    tr:hover { background: #f5f5f5; }
    .actions button { margin-right: 5px; padding: 5px 10px; border: none; border-radius: 4px; cursor: pointer; }
    .btn-activate { background: #4CAF50; color: white; }
    .btn-deactivate { background: #f44336; color: white; }
    .btn-duplicate { background: #2196F3; color: white; }
    .btn-edit { background: #FF9800; color: white; }
    .active { color: #4CAF50; font-weight: bold; }
    .inactive { color: #999; }
    .btn-new { background: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin-bottom: 20px; }
    .modal { display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.4); }
    .modal-content { background-color: #fefefe; margin: 5% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 600px; border-radius: 8px; }
    .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer; }
    .close:hover { color: black; }
    textarea { width: 100%; min-height: 200px; }
    .form-group { margin-bottom: 15px; }
    .form-group label { display: block; margin-bottom: 5px; font-weight: bold; }
    .form-group input, .form-group select, .form-group textarea { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
  </style>
</head>
<body>
  <div class="container">
    <h1>NovaVoice Prompt Management</h1>
    
    <button class="btn-new" onclick="showNewPromptModal()">Create New Prompt</button>
    
    <div class="filters">
      <label>Type:</label>
      <select id="typeFilter" onchange="loadPrompts()">
        <option value="">All Types</option>
        <option value="system">System</option>
        <option value="greeting">Greeting</option>
        <option value="scheduling">Scheduling</option>
        <option value="objection_handling">Objection Handling</option>
        <option value="closing">Closing</option>
      </select>
      
      <label>Status:</label>
      <select id="statusFilter" onchange="loadPrompts()">
        <option value="">All</option>
        <option value="active">Active Only</option>
        <option value="inactive">Inactive Only</option>
      </select>
      
      <label>Campaign:</label>
      <input type="text" id="campaignFilter" placeholder="Campaign ID" onkeyup="loadPrompts()">
      
      <label>Lead ID:</label>
      <input type="text" id="leadFilter" placeholder="Lead ID" onkeyup="loadPrompts()">
    </div>
    
    <table id="promptsTable">
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Type</th>
          <th>Version</th>
          <th>Status</th>
          <th>Campaign</th>
          <th>Lead</th>
          <th>Created</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="promptsBody">
        <!-- Populated by JavaScript -->
      </tbody>
    </table>
  </div>

  <!-- New/Edit Prompt Modal -->
  <div id="promptModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <h2 id="modalTitle">New Prompt</h2>
      <form id="promptForm" onsubmit="savePrompt(event)">
        <input type="hidden" id="promptId">
        
        <div class="form-group">
          <label>Name:</label>
          <input type="text" id="promptName" required>
        </div>
        
        <div class="form-group">
          <label>Type:</label>
          <select id="promptType" required>
            <option value="system">System</option>
            <option value="greeting">Greeting</option>
            <option value="scheduling">Scheduling</option>
            <option value="objection_handling">Objection Handling</option>
            <option value="closing">Closing</option>
          </select>
        </div>
        
        <div class="form-group">
          <label>Content:</label>
          <textarea id="promptContent" required placeholder="Use {{variable_name}} for template variables"></textarea>
        </div>
        
        <div class="form-group">
          <label>Campaign ID (optional):</label>
          <input type="text" id="promptCampaign">
        </div>
        
        <div class="form-group">
          <label>Lead ID (optional):</label>
          <input type="text" id="promptLead">
        </div>
        
        <button type="submit" class="btn-activate">Save Prompt</button>
      </form>
    </div>
  </div>

  <script>
    const API_BASE = '/api/v1/prompts';
    
    // Load prompts on page load
    document.addEventListener('DOMContentLoaded', loadPrompts);
    
    async function loadPrompts() {
      const type = document.getElementById('typeFilter').value;
      const status = document.getElementById('statusFilter').value;
      const campaign = document.getElementById('campaignFilter').value;
      const lead = document.getElementById('leadFilter').value;
      
      try {
        const response = await fetch(API_BASE);
        const data = await response.json();
        const prompts = data.prompts || data; // Handle both formats
        
        // Filter prompts
        const filtered = prompts.filter(prompt => {
          if (type && prompt.prompt_type !== type) return false;
          if (status === 'active' && !prompt.is_active) return false;
          if (status === 'inactive' && prompt.is_active) return false;
          if (campaign && prompt.campaign_id !== campaign) return false;
          if (lead && prompt.lead_id != lead) return false;
          return true;
        });
        
        displayPrompts(filtered);
      } catch (error) {
        console.error('Error loading prompts:', error);
        alert('Failed to load prompts');
      }
    }
    
    function displayPrompts(prompts) {
      const tbody = document.getElementById('promptsBody');
      tbody.innerHTML = '';
      
      prompts.forEach(prompt => {
        const row = tbody.insertRow();
        row.innerHTML = `
          <td>${prompt.id}</td>
          <td>${prompt.name}</td>
          <td>${prompt.prompt_type}</td>
          <td>${prompt.version}</td>
          <td class="${prompt.is_active ? 'active' : 'inactive'}">${prompt.is_active ? 'Active' : 'Inactive'}</td>
          <td>${prompt.campaign_id || '-'}</td>
          <td>${prompt.lead_id || '-'}</td>
          <td>${new Date(prompt.created_at).toLocaleDateString()}</td>
          <td class="actions">
            ${prompt.is_active ? 
              `<button class="btn-deactivate" onclick="deactivatePrompt(${prompt.id})">Deactivate</button>` :
              `<button class="btn-activate" onclick="activatePrompt(${prompt.id})">Activate</button>`
            }
            <button class="btn-duplicate" onclick="duplicatePrompt(${prompt.id})">Duplicate</button>
            <button class="btn-edit" onclick="editPrompt(${prompt.id})">Edit</button>
          </td>
        `;
      });
    }
    
    async function activatePrompt(id) {
      try {
        await fetch(`${API_BASE}/${id}/activate`, { method: 'PATCH' });
        loadPrompts();
      } catch (error) {
        alert('Failed to activate prompt');
      }
    }
    
    async function deactivatePrompt(id) {
      try {
        await fetch(`${API_BASE}/${id}/deactivate`, { method: 'PATCH' });
        loadPrompts();
      } catch (error) {
        alert('Failed to deactivate prompt');
      }
    }
    
    async function duplicatePrompt(id) {
      try {
        await fetch(`${API_BASE}/${id}/duplicate`, { method: 'POST' });
        loadPrompts();
      } catch (error) {
        alert('Failed to duplicate prompt');
      }
    }
    
    function showNewPromptModal() {
      document.getElementById('modalTitle').textContent = 'New Prompt';
      document.getElementById('promptForm').reset();
      document.getElementById('promptId').value = '';
      document.getElementById('promptModal').style.display = 'block';
    }
    
    async function editPrompt(id) {
      try {
        const response = await fetch(`${API_BASE}/${id}`);
        const prompt = await response.json();
        
        document.getElementById('modalTitle').textContent = 'Edit Prompt';
        document.getElementById('promptId').value = prompt.id;
        document.getElementById('promptName').value = prompt.name;
        document.getElementById('promptType').value = prompt.prompt_type;
        document.getElementById('promptContent').value = prompt.content;
        document.getElementById('promptCampaign').value = prompt.campaign_id || '';
        document.getElementById('promptLead').value = prompt.lead_id || '';
        
        document.getElementById('promptModal').style.display = 'block';
      } catch (error) {
        alert('Failed to load prompt details');
      }
    }
    
    function closeModal() {
      document.getElementById('promptModal').style.display = 'none';
    }
    
    async function savePrompt(event) {
      event.preventDefault();
      
      const id = document.getElementById('promptId').value;
      const data = {
        prompt: {
          name: document.getElementById('promptName').value,
          prompt_type: document.getElementById('promptType').value,
          content: document.getElementById('promptContent').value,
          campaign_id: document.getElementById('promptCampaign').value || null,
          lead_id: document.getElementById('promptLead').value || null
        }
      };
      
      try {
        const method = id ? 'PUT' : 'POST';
        const url = id ? `${API_BASE}/${id}` : API_BASE;
        
        await fetch(url, {
          method: method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        closeModal();
        loadPrompts();
      } catch (error) {
        alert('Failed to save prompt');
      }
    }
    
    // Close modal when clicking outside
    window.onclick = function(event) {
      const modal = document.getElementById('promptModal');
      if (event.target == modal) {
        closeModal();
      }
    }
  </script>
</body>
</html>