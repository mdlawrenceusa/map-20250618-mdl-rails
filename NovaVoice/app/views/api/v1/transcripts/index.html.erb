<!DOCTYPE html>
<html>
<head>
  <title>Call Transcripts - NovaVoice</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  
  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  
  <!-- DataTables CSS and JS -->
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.bootstrap5.min.css">
  
  <script type="text/javascript" src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
  
  <!-- DataTables Buttons Extension -->
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.html5.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.print.min.js"></script>
  
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
    .container { max-width: 1400px; margin: 0 auto; }
    h1 { color: #333; }
    
    /* Stats Cards */
    .stats-row { display: flex; gap: 20px; margin-bottom: 30px; flex-wrap: wrap; }
    .stat-card { 
      background: white; 
      padding: 20px; 
      border-radius: 8px; 
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      min-width: 200px;
      flex: 1;
    }
    .stat-number { font-size: 2em; font-weight: bold; color: #4CAF50; }
    .stat-label { color: #666; margin-top: 5px; }
    
    /* Search and Filters */
    .search-section { 
      background: white; 
      padding: 20px; 
      border-radius: 8px; 
      margin-bottom: 20px; 
      box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
    }
    .search-form { display: flex; gap: 15px; align-items: end; flex-wrap: wrap; }
    .form-group { display: flex; flex-direction: column; }
    .form-group label { margin-bottom: 5px; font-weight: bold; }
    .form-group input { padding: 8px; border: 1px solid #ddd; border-radius: 4px; min-width: 200px; }
    .btn { padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-weight: bold; }
    .btn-primary { background: #4CAF50; color: white; }
    .btn-secondary { background: #666; color: white; }
    
    /* Call List */
    .calls-section { background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .call-header { background: #4CAF50; color: white; padding: 15px; font-weight: bold; }
    .call-item { 
      border-bottom: 1px solid #eee; 
      padding: 15px; 
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .call-item:hover { background: #f8f8f8; }
    .call-item:last-child { border-bottom: none; }
    
    .call-meta { display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; }
    .call-id { font-weight: bold; color: #333; }
    .call-time { color: #666; font-size: 0.9em; }
    .call-phone { color: #4CAF50; font-weight: bold; }
    .call-duration { color: #666; }
    .call-status { 
      padding: 4px 8px; 
      border-radius: 12px; 
      font-size: 0.8em; 
      font-weight: bold;
    }
    .status-completed { background: #e8f5e8; color: #2e7d32; }
    .status-failed { background: #ffebee; color: #c62828; }
    .status-in-progress { background: #fff3e0; color: #ef6c00; }
    
    .call-preview { 
      color: #666; 
      font-size: 0.9em; 
      max-height: 3em; 
      overflow: hidden; 
      text-overflow: ellipsis;
      line-height: 1.5em;
    }
    
    /* No calls message */
    .no-calls { 
      text-align: center; 
      padding: 40px; 
      color: #666; 
      font-style: italic; 
    }
    
    /* Navigation */
    .nav-link { 
      display: inline-block; 
      margin-right: 20px; 
      color: #4CAF50; 
      text-decoration: none; 
      font-weight: bold;
    }
    .nav-link:hover { text-decoration: underline; }
    
    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.5);
    }
    
    .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 0;
      border-radius: 8px;
      width: 90%;
      max-width: 800px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.3);
      max-height: 85vh;
      display: flex;
      flex-direction: column;
    }
    
    .modal-header {
      background: #4CAF50;
      color: white;
      padding: 20px;
      border-radius: 8px 8px 0 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .modal-header h2 {
      margin: 0;
      font-size: 1.5em;
    }
    
    .close {
      color: white;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      background: none;
      border: none;
      padding: 0;
      line-height: 1;
    }
    
    .close:hover,
    .close:focus {
      opacity: 0.8;
    }
    
    .modal-body {
      padding: 20px;
      overflow-y: auto;
      flex: 1;
    }
    
    /* Call Info Section */
    .call-info {
      background: #f5f5f5;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }
    
    .info-item {
      display: flex;
      flex-direction: column;
    }
    
    .info-label {
      font-size: 0.9em;
      color: #666;
      margin-bottom: 3px;
    }
    
    .info-value {
      font-weight: bold;
      color: #333;
    }
    
    /* Transcript Messages */
    .transcript-messages {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    
    .message {
      display: flex;
      gap: 10px;
      animation: fadeIn 0.3s ease-in;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .message-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      flex-shrink: 0;
    }
    
    .message-human .message-avatar {
      background: #e3f2fd;
    }
    
    .message-assistant .message-avatar {
      background: #e8f5e9;
    }
    
    .message-content {
      flex: 1;
      background: white;
      padding: 12px 16px;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .message-speaker {
      font-weight: bold;
      color: #333;
      margin-bottom: 4px;
      font-size: 0.9em;
    }
    
    .message-text {
      color: #555;
      line-height: 1.5;
    }
    
    .message-time {
      font-size: 0.8em;
      color: #999;
      margin-top: 4px;
    }
    
    /* Action Buttons */
    .modal-actions {
      padding: 15px 20px;
      border-top: 1px solid #eee;
      display: flex;
      gap: 10px;
      background: #fafafa;
      border-radius: 0 0 8px 8px;
    }
    
    .btn-small {
      padding: 8px 16px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.9em;
      font-weight: bold;
    }
    
    /* Loading State */
    .loading {
      text-align: center;
      padding: 40px;
      color: #666;
    }
    
    .spinner {
      border: 3px solid #f3f3f3;
      border-top: 3px solid #4CAF50;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üìû Call Transcripts & Analytics</h1>
    
    <div style="margin-bottom: 20px;">
      <a href="/api/v1/prompts/admin" class="nav-link">‚Üê Back to Prompt Management</a>
      <a href="/api/v1/transcripts" class="nav-link">All Calls</a>
    </div>
    
    <!-- Stats Dashboard -->
    <div class="stats-row">
      <div class="stat-card">
        <div class="stat-number"><%= @stats[:total_calls] %></div>
        <div class="stat-label">Total Calls</div>
      </div>
      <div class="stat-card">
        <div class="stat-number"><%= @stats[:completed_calls] %></div>
        <div class="stat-label">Completed Calls</div>
      </div>
      <div class="stat-card">
        <div class="stat-number"><%= @stats[:average_duration] %>s</div>
        <div class="stat-label">Average Duration</div>
      </div>
      <div class="stat-card">
        <div class="stat-number"><%= (@stats[:total_duration] / 60.0).round(1) %>m</div>
        <div class="stat-label">Total Talk Time</div>
      </div>
    </div>
    
    <!-- Search and Filters -->
    <div class="search-section">
      <form action="/api/v1/transcripts/search" method="get" class="search-form">
        <div class="form-group">
          <label>Search Transcript</label>
          <input type="text" name="query" placeholder="Search conversation content..." value="<%= params[:query] %>">
        </div>
        <div class="form-group">
          <label>Phone Number</label>
          <input type="text" name="phone_number" placeholder="(555) 123-4567" value="<%= params[:phone_number] %>">
        </div>
        <div class="form-group">
          <label>&nbsp;</label>
          <button type="submit" class="btn btn-primary">Search</button>
          <a href="/api/v1/transcripts" class="btn btn-secondary">Clear</a>
        </div>
      </form>
    </div>
    
    <!-- Call List with DataTables -->
    <div class="calls-section">
      <div class="call-header">
        Recent Calls (<%= @calls.length %> shown)
      </div>
      
      <% if @calls.any? %>
        <div style="padding: 20px;">
          <table id="transcripts-table" class="table table-striped table-bordered" style="width:100%">
            <thead>
              <tr>
                <th>Call ID</th>
                <th>Phone Number</th>
                <th>Date & Time</th>
                <th>Duration</th>
                <th>Status</th>
                <th>Transcript Preview</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% @calls.each do |call| %>
                <tr>
                  <td>
                    <code style="font-size: 0.8em;">
                      <%= call[:call_id][0..7] %>...
                    </code>
                    <br><small class="text-muted">
                      <%= call[:call_id] %>
                    </small>
                  </td>
                  <td>
                    <% if call[:phone_number] %>
                      <a href="tel:<%= call[:phone_number] %>" class="text-primary">
                        üì± <%= call[:phone_number] %>
                      </a>
                    <% else %>
                      <span class="text-muted">Unknown</span>
                    <% end %>
                  </td>
                  <td data-order="<%= call[:start_time] ? Time.parse(call[:start_time]).to_i : 0 %>">
                    <% if call[:start_time] %>
                      <%= Time.parse(call[:start_time]).in_time_zone('Eastern Time (US & Canada)').strftime('%m/%d/%Y') %>
                      <br><small class="text-muted">
                        <%= Time.parse(call[:start_time]).in_time_zone('Eastern Time (US & Canada)').strftime('%I:%M %p EST') %>
                      </small>
                    <% else %>
                      <span class="text-muted">Unknown</span>
                    <% end %>
                  </td>
                  <td data-order="<%= call[:duration] || 0 %>">
                    <% duration = call[:duration] || 0 %>
                    <% if duration > 60 %>
                      <strong><%= (duration / 60.0).round(1) %>m</strong>
                    <% else %>
                      <strong><%= duration %>s</strong>
                    <% end %>
                    <br><small class="text-muted">
                      ‚è±Ô∏è <%= duration %> seconds
                    </small>
                  </td>
                  <td data-order="<%= call[:status] || 'unknown' %>">
                    <span class="badge <%= 
                      case call[:status]
                      when 'completed' then 'bg-success'
                      when 'failed' then 'bg-danger'
                      when 'in-progress', 'in_progress' then 'bg-warning'
                      else 'bg-secondary'
                      end
                    %>">
                      <%= (call[:status] || 'unknown').humanize %>
                    </span>
                  </td>
                  <td style="max-width: 300px;">
                    <div style="max-height: 60px; overflow: hidden; line-height: 1.4;">
                      <%= truncate(call[:transcript] || 'No transcript available', length: 150) %>
                    </div>
                  </td>
                  <td>
                    <div class="btn-group btn-group-sm" role="group">
                      <button class="btn btn-outline-primary btn-sm" 
                              onclick="viewCall('<%= call[:call_id] %>')"
                              title="View Full Transcript"
                              data-toggle="tooltip">
                        <i class="fas fa-eye"></i>
                      </button>
                      
                      <button class="btn btn-outline-success btn-sm" 
                              onclick="copyTranscriptQuick('<%= call[:call_id] %>')"
                              title="Quick Copy"
                              data-toggle="tooltip">
                        <i class="fas fa-copy"></i>
                      </button>
                      
                      <button class="btn btn-outline-info btn-sm" 
                              onclick="downloadTranscriptQuick('<%= call[:call_id] %>')"
                              title="Download"
                              data-toggle="tooltip">
                        <i class="fas fa-download"></i>
                      </button>
                    </div>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
        
        <!-- DataTables Initialization -->
        <script>
        $(document).ready(function() {
          $('#transcripts-table').DataTable({
            pageLength: 15,
            lengthMenu: [[10, 15, 25, 50, -1], [10, 15, 25, 50, "All"]],
            responsive: true,
            processing: true,
            order: [[2, "desc"]], // Sort by date/time (newest first)
            columnDefs: [
              { targets: [0], width: "15%" },  // Call ID
              { targets: [1], width: "12%" },  // Phone
              { targets: [2], width: "12%" },  // Date/Time
              { targets: [3], width: "8%" },   // Duration
              { targets: [4], width: "8%" },   // Status
              { targets: [5], width: "35%" },  // Transcript Preview
              { targets: [6], orderable: false, searchable: false, width: "10%" } // Actions
            ],
            dom: 'Bfrtip',
            buttons: [
              {
                extend: 'copy',
                text: '<i class="fas fa-copy"></i> Copy',
                className: 'btn btn-outline-primary btn-sm',
                exportOptions: { columns: [0, 1, 2, 3, 4, 5] }
              },
              {
                extend: 'csv',
                text: '<i class="fas fa-file-csv"></i> CSV',
                className: 'btn btn-outline-success btn-sm',
                filename: 'call_transcripts_' + new Date().toISOString().slice(0,10),
                exportOptions: { columns: [0, 1, 2, 3, 4, 5] }
              },
              {
                extend: 'excel',
                text: '<i class="fas fa-file-excel"></i> Excel',
                className: 'btn btn-outline-success btn-sm',
                filename: 'call_transcripts_' + new Date().toISOString().slice(0,10),
                exportOptions: { columns: [0, 1, 2, 3, 4, 5] }
              }
            ],
            language: {
              search: "Search transcripts:",
              lengthMenu: "Show _MENU_ calls per page",
              info: "Showing _START_ to _END_ of _TOTAL_ calls",
              infoEmpty: "No calls found",
              infoFiltered: "(filtered from _MAX_ total calls)",
              emptyTable: "No call transcripts available",
              zeroRecords: "No matching calls found"
            }
          });
          
          // Initialize tooltips
          $('[data-toggle="tooltip"]').tooltip();
        });
        </script>
        
      <% else %>
        <div class="no-calls">
          <% if params[:query] || params[:phone_number] %>
            No calls found matching your search criteria.
          <% else %>
            No call transcripts found in DynamoDB.
          <% end %>
        </div>
      <% end %>
    </div>
  </div>

  <!-- Modal -->
  <div id="transcriptModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>üìû Call Transcript</h2>
        <button class="close" onclick="closeModal()">&times;</button>
      </div>
      <div class="modal-body" id="modalBody">
        <div class="loading">
          <div class="spinner"></div>
          <p>Loading transcript...</p>
        </div>
      </div>
      <div class="modal-actions">
        <button class="btn-small btn-primary" onclick="copyTranscript()">üìã Copy</button>
        <button class="btn-small btn-secondary" onclick="downloadTranscript()">üíæ Download</button>
        <button class="btn-small btn-secondary" onclick="closeModal()">Close</button>
      </div>
    </div>
  </div>

  <script>
    let currentCall = null;
    
    function viewCall(callId) {
      // Show modal
      document.getElementById('transcriptModal').style.display = 'block';
      
      // Build the correct API path based on current location
      const currentPath = window.location.pathname;
      const apiBasePath = currentPath.includes('/app/') ? '/app/api/v1/transcripts' : '/api/v1/transcripts';
      
      // Fetch call details
      fetch(`${apiBasePath}/${callId}.json`)
        .then(response => response.json())
        .then(data => {
          currentCall = data.call;
          displayTranscript(data.call);
        })
        .catch(error => {
          console.error('Error fetching transcript:', error);
          document.getElementById('modalBody').innerHTML = `
            <div class="loading">
              <p style="color: #c62828;">Error loading transcript. Please try again.</p>
            </div>
          `;
        });
    }
    
    function displayTranscript(call) {
      // Parse the transcript to extract messages
      const messages = parseTranscript(call.transcript);
      
      // Format the call info
      const startTime = call.start_time ? formatToEST(new Date(call.start_time)) : 'Unknown';
      const endTime = call.end_time ? new Date(call.end_time) : null;
      
      const modalBody = `
        <div class="call-info">
          <div class="info-item">
            <div class="info-label">Call ID</div>
            <div class="info-value">${call.call_id}</div>
          </div>
          <div class="info-item">
            <div class="info-label">Phone Number</div>
            <div class="info-value">${call.phone_number || 'Unknown'}</div>
          </div>
          <div class="info-item">
            <div class="info-label">Date & Time (EST)</div>
            <div class="info-value">${startTime}</div>
          </div>
          <div class="info-item">
            <div class="info-label">Duration</div>
            <div class="info-value">${formatDuration(call.duration)}</div>
          </div>
          <div class="info-item">
            <div class="info-label">Status</div>
            <div class="info-value">
              <span class="call-status status-${call.status || 'unknown'}">
                ${(call.status || 'unknown').replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
              </span>
            </div>
          </div>
        </div>
        
        <h3 style="margin: 20px 0 10px; color: #333;">Conversation</h3>
        <div class="transcript-messages">
          ${messages.map(msg => `
            <div class="message message-${msg.speaker.toLowerCase()}">
              <div class="message-avatar">
                ${msg.speaker === 'Human' ? 'üë§' : 'ü§ñ'}
              </div>
              <div class="message-content">
                <div class="message-speaker">${msg.speaker}</div>
                <div class="message-text">${msg.text}</div>
                ${msg.time ? `<div class="message-time">${formatTimeToEST(msg.time)}</div>` : ''}
              </div>
            </div>
          `).join('')}
        </div>
      `;
      
      document.getElementById('modalBody').innerHTML = modalBody;
    }
    
    function parseTranscript(transcript) {
      if (!transcript) return [{speaker: 'System', text: 'No transcript available'}];
      
      const messages = [];
      const lines = transcript.split('\n');
      
      lines.forEach(line => {
        // Parse lines like "**Human** (3:39:12 AM): message text"
        const humanMatch = line.match(/\*\*Human\*\*\s*\(([^)]+)\):\s*(.+)/);
        const assistantMatch = line.match(/\*\*Assistant\*\*\s*\(([^)]+)\):\s*(.+)/);
        
        if (humanMatch) {
          messages.push({
            speaker: 'Human',
            time: humanMatch[1],
            text: humanMatch[2].trim()
          });
        } else if (assistantMatch) {
          messages.push({
            speaker: 'Assistant',
            time: assistantMatch[1],
            text: assistantMatch[2].trim()
          });
        }
      });
      
      return messages.length > 0 ? messages : [{speaker: 'System', text: transcript}];
    }
    
    function formatDuration(seconds) {
      if (!seconds) return '0 seconds';
      const mins = Math.floor(seconds / 60);
      const secs = Math.round(seconds % 60);
      if (mins > 0) {
        return `${mins} minute${mins !== 1 ? 's' : ''} ${secs} second${secs !== 1 ? 's' : ''}`;
      }
      return `${secs} second${secs !== 1 ? 's' : ''}`;
    }
    
    function formatToEST(date) {
      // Convert to EST/EDT
      const options = {
        timeZone: 'America/New_York',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true
      };
      
      const estTime = date.toLocaleString('en-US', options);
      // Add EST/EDT suffix based on whether daylight saving is active
      const isDST = isDaylightSavingTime(date);
      return `${estTime} ${isDST ? 'EDT' : 'EST'}`;
    }
    
    function isDaylightSavingTime(date) {
      const jan = new Date(date.getFullYear(), 0, 1).getTimezoneOffset();
      const jul = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      return Math.max(jan, jul) !== date.getTimezoneOffset();
    }
    
    function formatTimeToEST(timeStr) {
      // Convert time strings like "3:39:12 AM" to EST
      // These times in the transcript might already be in a specific timezone
      // For now, we'll display them as-is with EST notation
      return timeStr + ' EST';
    }
    
    function closeModal() {
      document.getElementById('transcriptModal').style.display = 'none';
      currentCall = null;
    }
    
    function copyTranscript() {
      if (!currentCall) return;
      
      const messages = parseTranscript(currentCall.transcript);
      const formattedText = messages.map(msg => 
        `${msg.speaker}${msg.time ? ` (${formatTimeToEST(msg.time)})` : ''}: ${msg.text}`
      ).join('\n\n');
      
      navigator.clipboard.writeText(formattedText).then(() => {
        alert('Transcript copied to clipboard!');
      }).catch(() => {
        alert('Failed to copy transcript');
      });
    }
    
    function downloadTranscript() {
      if (!currentCall) return;
      
      const messages = parseTranscript(currentCall.transcript);
      const formattedText = `Call Transcript
Call ID: ${currentCall.call_id}
Phone: ${currentCall.phone_number || 'Unknown'}
Date: ${currentCall.start_time ? formatToEST(new Date(currentCall.start_time)) : 'Unknown'}
Duration: ${formatDuration(currentCall.duration)}
Status: ${currentCall.status}

=== CONVERSATION ===

${messages.map(msg => 
  `${msg.speaker}${msg.time ? ` (${formatTimeToEST(msg.time)})` : ''}: ${msg.text}`
).join('\n\n')}`;
      
      const blob = new Blob([formattedText], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `transcript_${currentCall.call_id.substring(0, 8)}_${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    }
    
    // Quick copy function for table buttons
    function copyTranscriptQuick(callId) {
      // Build the correct API path based on current location
      const currentPath = window.location.pathname;
      const apiBasePath = currentPath.includes('/app/') ? '/app/api/v1/transcripts' : '/api/v1/transcripts';
      
      fetch(`${apiBasePath}/${callId}.json`)
        .then(response => response.json())
        .then(data => {
          const call = data.call;
          const messages = parseTranscript(call.transcript);
          const formattedText = messages.map(msg => 
            `${msg.speaker}${msg.time ? ` (${formatTimeToEST(msg.time)})` : ''}: ${msg.text}`
          ).join('\n\n');
          
          navigator.clipboard.writeText(formattedText).then(() => {
            alert('Transcript copied to clipboard!');
          }).catch(() => {
            alert('Failed to copy transcript');
          });
        })
        .catch(error => {
          console.error('Error fetching transcript:', error);
          alert('Error fetching transcript');
        });
    }
    
    // Quick download function for table buttons
    function downloadTranscriptQuick(callId) {
      // Build the correct API path based on current location
      const currentPath = window.location.pathname;
      const apiBasePath = currentPath.includes('/app/') ? '/app/api/v1/transcripts' : '/api/v1/transcripts';
      
      fetch(`${apiBasePath}/${callId}.json`)
        .then(response => response.json())
        .then(data => {
          const call = data.call;
          const messages = parseTranscript(call.transcript);
          const formattedText = `Call Transcript
Call ID: ${call.call_id}
Phone: ${call.phone_number || 'Unknown'}
Date: ${call.start_time ? formatToEST(new Date(call.start_time)) : 'Unknown'}
Duration: ${formatDuration(call.duration)}
Status: ${call.status}

=== CONVERSATION ===

${messages.map(msg => 
  `${msg.speaker}${msg.time ? ` (${formatTimeToEST(msg.time)})` : ''}: ${msg.text}`
).join('\n\n')}`;
          
          const blob = new Blob([formattedText], { type: 'text/plain' });
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `transcript_${call.call_id.substring(0, 8)}_${new Date().toISOString().split('T')[0]}.txt`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
        })
        .catch(error => {
          console.error('Error fetching transcript:', error);
          alert('Error downloading transcript');
        });
    }
    
    // Close modal when clicking outside of it
    window.onclick = function(event) {
      const modal = document.getElementById('transcriptModal');
      if (event.target == modal) {
        closeModal();
      }
    }
    
    // Close modal on Escape key
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        closeModal();
      }
    });
    
    // Auto-refresh every 30 seconds if no search params
    <% unless params[:query] || params[:phone_number] %>
      setTimeout(() => {
        window.location.reload();
      }, 30000);
    <% end %>
  </script>
</body>
</html>