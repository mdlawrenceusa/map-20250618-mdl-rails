# CloudFormation Template for NovaVoice Production Infrastructure
# Sets up CloudFront, SSL, WAF, and ALB for novavoice.gospelshare.com

AWSTemplateFormatVersion: '2010-09-09'
Description: 'NovaVoice Production Infrastructure - CloudFront, SSL, WAF, ALB'

Parameters:
  DomainName:
    Type: String
    Default: 'novavoice.gospelshare.com'
    Description: 'Domain name for the NovaVoice application'
    
  HostedZoneId:
    Type: String
    Default: 'Z075223437JLVVBIVE60G'
    Description: 'Route 53 Hosted Zone ID for gospelshare.io'
    
  EC2InstanceId:
    Type: String
    Description: 'EC2 Instance ID where NovaVoice is running'
    
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID where the ALB will be created'
    
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'Subnet IDs for the ALB (minimum 2 for HA)'

Resources:
  # SSL Certificate for novavoice.gospelshare.com
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-ssl-cert'
        - Key: Application
          Value: NovaVoice
        - Key: Environment
          Value: Production

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-alb'
        - Key: Application
          Value: NovaVoice

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-alb-sg'
      GroupDescription: 'Security group for NovaVoice ALB'
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP from CloudFront'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS from CloudFront'
      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-alb-sg'

  # Target Group for Rails Application
  RailsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-rails-tg'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: instance
      Targets:
        - Id: !Ref EC2InstanceId
          Port: 3000
      HealthCheckPath: /up
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-rails-tg'

  # Target Group for Microservice
  MicroserviceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-micro-tg'
      Port: 3001
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: instance
      Targets:
        - Id: !Ref EC2InstanceId
          Port: 3001
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-micro-tg'

  # ALB Listeners
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RailsTargetGroup

  # ALB Listener Rules for Microservice
  MicroserviceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListenerHTTPS
      Priority: 100
      Conditions:
        - Field: path-pattern
          Values:
            - '/webhooks/*'
            - '/ws/*'
            - '/call/*'
            - '/health'
            - '/channels'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MicroserviceTargetGroup

  # WAF Web ACL
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${AWS::StackName}-waf'
      Description: 'WAF for NovaVoice Production'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      Rules:
        # Rate limiting
        - Name: RateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-rate-limit'

        # AWS Managed Rules - Core Rule Set
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-common-rules'

        # AWS Managed Rules - Known Bad Inputs
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-bad-inputs'

        # Vonage IP Whitelist (for webhooks)
        - Name: VonageIPWhitelist
          Priority: 4
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt VonageIPSet.Arn
          Action:
            Allow: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${AWS::StackName}-vonage-whitelist'

      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${AWS::StackName}-waf'
      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-waf'

  # IP Set for Vonage webhooks
  VonageIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: !Sub '${AWS::StackName}-vonage-ips'
      Description: 'Vonage webhook IP addresses'
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses:
        - '174.37.245.32/27'
        - '174.36.197.192/27'
        - '174.37.245.192/27'
        - '119.81.44.0/27'
        - '174.36.197.208/28'
      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-vonage-ips'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Comment: !Sub 'NovaVoice Production - ${DomainName}'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_100
        
        # Origin configuration
        Origins:
          - Id: ALBOrigin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        
        # Default cache behavior
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: true
            Headers:
              - '*'
            Cookies:
              Forward: all
          MinTTL: 0
          DefaultTTL: 0
          MaxTTL: 31536000
          Compress: true

        # Cache behaviors for different paths
        CacheBehaviors:
          # Static assets - long cache
          - PathPattern: '/assets/*'
            TargetOriginId: ALBOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Headers:
                - CloudFront-Forwarded-Proto
            MinTTL: 86400
            DefaultTTL: 2592000
            MaxTTL: 31536000
            Compress: true

          # API endpoints - no cache
          - PathPattern: '/api/*'
            TargetOriginId: ALBOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Headers:
                - '*'
              Cookies:
                Forward: all
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0

          # Webhooks - no cache, high availability
          - PathPattern: '/webhooks/*'
            TargetOriginId: ALBOrigin
            ViewerProtocolPolicy: allow-all
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: true
              Headers:
                - '*'
              Cookies:
                Forward: all
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0

        # SSL configuration
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

        # WAF integration
        WebACLId: !GetAtt WebACL.Arn

        # Logging
        Logging:
          Bucket: !Sub '${LoggingBucket}.s3.amazonaws.com'
          IncludeCookies: false
          Prefix: 'cloudfront-logs/'

      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-cloudfront'
        - Key: Application
          Value: NovaVoice

  # S3 bucket for CloudFront logs
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-cloudfront-logs-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Name
          Value: !Sub '${DomainName}-logs'

  # Route 53 Record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID

Outputs:
  CloudFrontURL:
    Description: 'CloudFront Distribution URL'
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  LoadBalancerDNS:
    Description: 'Application Load Balancer DNS Name'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALB-DNS'

  SSLCertificateArn:
    Description: 'SSL Certificate ARN'
    Value: !Ref SSLCertificate
    Export:
      Name: !Sub '${AWS::StackName}-SSL-Cert'

  WebACLArn:
    Description: 'WAF Web ACL ARN'
    Value: !GetAtt WebACL.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WAF-ACL'