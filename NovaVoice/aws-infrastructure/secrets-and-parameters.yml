# CloudFormation Template for NovaVoice Security Infrastructure
# Sets up Secrets Manager, Parameter Store, and IAM with least privilege

AWSTemplateFormatVersion: '2010-09-09'
Description: 'NovaVoice Security Infrastructure - Secrets Manager, Parameter Store, IAM'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['production', 'staging']
    Description: 'Environment name'

Resources:
  # Secrets Manager for sensitive credentials
  VonageCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/novavoice/${Environment}/vonage/credentials'
      Description: 'Vonage API credentials for NovaVoice'
      SecretString: |
        {
          "api_key": "placeholder",
          "api_secret": "placeholder",
          "application_id": "placeholder",
          "private_key": "placeholder"
        }
      Tags:
        - Key: Application
          Value: NovaVoice
        - Key: Environment
          Value: !Ref Environment

  DatabaseCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/novavoice/${Environment}/database/credentials'
      Description: 'Aurora DSQL credentials for NovaVoice'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "novavoice_prod"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Application
          Value: NovaVoice
        - Key: Environment
          Value: !Ref Environment

  RailsSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/novavoice/${Environment}/rails/secrets'
      Description: 'Rails application secrets'
      GenerateSecretString:
        SecretStringTemplate: '{"rails_master_key": ""}'
        GenerateStringKey: 'secret_key_base'
        PasswordLength: 128
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Application
          Value: NovaVoice
        - Key: Environment
          Value: !Ref Environment

  # Parameter Store for configuration values
  MicroserviceUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/novavoice/${Environment}/microservice/url'
      Type: String
      Value: 'http://localhost:3001'
      Description: 'Microservice URL for NovaVoice'
      Tags:
        Application: NovaVoice
        Environment: !Ref Environment

  AwsRegionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/novavoice/${Environment}/aws/region'
      Type: String
      Value: !Ref AWS::Region
      Description: 'AWS region for NovaVoice'
      Tags:
        Application: NovaVoice
        Environment: !Ref Environment

  RedisUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/novavoice/${Environment}/redis/url'
      Type: String
      Value: 'redis://localhost:6379/0'
      Description: 'Redis URL for NovaVoice'
      Tags:
        Application: NovaVoice
        Environment: !Ref Environment

  RailsConfigParameters:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/novavoice/${Environment}/rails/config'
      Type: String
      Value: !Sub |
        {
          "rails_env": "${Environment}",
          "rails_log_to_stdout": "true",
          "rails_serve_static_files": "true",
          "solid_queue_in_puma": "true",
          "web_concurrency": "2",
          "max_threads": "5"
        }
      Description: 'Rails configuration parameters'
      Tags:
        Application: NovaVoice
        Environment: !Ref Environment

  # IAM Role for NovaVoice Rails Application (Least Privilege)
  NovaVoiceRailsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'NovaVoice-Rails-${Environment}-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub 'novavoice-rails-${Environment}'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Application
          Value: NovaVoice-Rails
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for NovaVoice Microservice (Least Privilege)
  NovaVoiceMicroserviceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'NovaVoice-Microservice-${Environment}-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub 'novavoice-microservice-${Environment}'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Application
          Value: NovaVoice-Microservice
        - Key: Environment
          Value: !Ref Environment

  # IAM Policy for Rails Secrets Manager access (Rails only needs DB and Rails secrets)
  RailsSecretsManagerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'NovaVoice-Rails-SecretsManager-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource:
              - !Ref DatabaseCredentials
              - !Ref RailsSecrets
      Roles:
        - !Ref NovaVoiceRailsRole

  # IAM Policy for Microservice Secrets Manager access (Microservice needs Vonage)
  MicroserviceSecretsManagerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'NovaVoice-Microservice-SecretsManager-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource:
              - !Ref VonageCredentials
      Roles:
        - !Ref NovaVoiceMicroserviceRole

  # IAM Policy for Parameter Store access (Least Privilege)
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'NovaVoice-ParameterStore-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/novavoice/${Environment}/*'
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
            Resource: '*'
            Condition:
              StringLike:
                'ssm:Name': !Sub '/novavoice/${Environment}/*'
      Roles:
        - !Ref NovaVoiceRailsRole

  # IAM Policy for Bedrock Nova Sonic access (Microservice only)
  BedrockNovaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'NovaVoice-Bedrock-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.nova-sonic-v1:0'
          - Effect: Allow
            Action:
              - bedrock:GetFoundationModel
              - bedrock:ListFoundationModels
            Resource: '*'
            Condition:
              StringLike:
                'bedrock:ModelId': 'amazon.nova-sonic*'
      Roles:
        - !Ref NovaVoiceMicroserviceRole

  # IAM Policy for DynamoDB access (Both Rails and Microservice need this)
  RailsDynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'NovaVoice-Rails-DynamoDB-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Churches'
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Churches/index/*'
      Roles:
        - !Ref NovaVoiceRailsRole

  MicroserviceDynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'NovaVoice-Microservice-DynamoDB-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:GetItem
              - dynamodb:Query
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Churches'
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nova-sonic-call-records'
          - Effect: Allow
            Action:
              - dynamodb:Query
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Churches/index/*'
      Roles:
        - !Ref NovaVoiceMicroserviceRole

  # IAM Policy for CloudWatch Logs (Both services)
  RailsCloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'NovaVoice-Rails-CloudWatchLogs-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/novavoice/rails/${Environment}/*'
      Roles:
        - !Ref NovaVoiceRailsRole

  MicroserviceCloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'NovaVoice-Microservice-CloudWatchLogs-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/novavoice/microservice/${Environment}/*'
      Roles:
        - !Ref NovaVoiceMicroserviceRole

Outputs:
  RailsRoleArn:
    Description: 'IAM Role ARN for NovaVoice Rails Application'
    Value: !GetAtt NovaVoiceRailsRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RailsRole'

  MicroserviceRoleArn:
    Description: 'IAM Role ARN for NovaVoice Microservice'
    Value: !GetAtt NovaVoiceMicroserviceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MicroserviceRole'

  VonageSecretsArn:
    Description: 'Vonage Credentials Secret ARN'
    Value: !Ref VonageCredentials
    Export:
      Name: !Sub '${AWS::StackName}-VonageSecrets'

  DatabaseSecretsArn:
    Description: 'Database Credentials Secret ARN'
    Value: !Ref DatabaseCredentials
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecrets'

  RailsSecretsArn:
    Description: 'Rails Secrets ARN'
    Value: !Ref RailsSecrets
    Export:
      Name: !Sub '${AWS::StackName}-RailsSecrets'

  ParameterStorePrefix:
    Description: 'Parameter Store prefix for NovaVoice'
    Value: !Sub '/novavoice/${Environment}/'
    Export:
      Name: !Sub '${AWS::StackName}-ParameterPrefix'