{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lambda/seeds-generator/index.js"],"names":[],"mappings":"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","sourcesContent":["const AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\n\nconst OUTPUT_BUCKET = process.env.OUTPUT_BUCKET;\n\nexports.handler = async (event) => {\n    console.log('Starting Rails seeds.rb generator');\n    \n    try {\n        // Get the latest processed files from S3\n        const listParams = {\n            Bucket: OUTPUT_BUCKET,\n            Prefix: 'processed/',\n            MaxKeys: 1000\n        };\n        \n        const listResult = await s3.listObjectsV2(listParams).promise();\n        \n        if (!listResult.Contents || listResult.Contents.length === 0) {\n            throw new Error('No processed files found in output bucket');\n        }\n        \n        // Find the most recent leads.json file\n        const sortedFiles = listResult.Contents\n            .filter(obj => obj.Key.endsWith('leads.json'))\n            .sort((a, b) => b.LastModified - a.LastModified);\n        \n        if (sortedFiles.length === 0) {\n            throw new Error('No leads.json file found');\n        }\n        \n        const latestFile = sortedFiles[0];\n        console.log(`Processing file: ${latestFile.Key}`);\n        \n        // Read all JSON parts (Spark might create multiple part files)\n        const dirPath = latestFile.Key.substring(0, latestFile.Key.lastIndexOf('/') + 1);\n        const dirListParams = {\n            Bucket: OUTPUT_BUCKET,\n            Prefix: dirPath\n        };\n        \n        const dirContents = await s3.listObjectsV2(dirListParams).promise();\n        const jsonFiles = dirContents.Contents.filter(obj => \n            obj.Key.endsWith('.json') && !obj.Key.includes('_SUCCESS')\n        );\n        \n        // Read and merge all JSON files\n        let allLeads = [];\n        \n        for (const file of jsonFiles) {\n            const getParams = {\n                Bucket: OUTPUT_BUCKET,\n                Key: file.Key\n            };\n            \n            const fileContent = await s3.getObject(getParams).promise();\n            const lines = fileContent.Body.toString().trim().split('\\n');\n            \n            for (const line of lines) {\n                if (line.trim()) {\n                    try {\n                        const lead = JSON.parse(line);\n                        allLeads.push(lead);\n                    } catch (e) {\n                        console.warn(`Failed to parse line: ${line.substring(0, 100)}...`);\n                    }\n                }\n            }\n        }\n        \n        console.log(`Found ${allLeads.length} leads to convert`);\n        \n        // Generate seeds.rb content\n        let seedsContent = `# Generated by ETL Pipeline on ${new Date().toISOString()}\\n`;\n        seedsContent += `# Total leads: ${allLeads.length}\\n\\n`;\n        seedsContent += `# Clear existing leads (optional - comment out if you want to append)\\n`;\n        seedsContent += `# Lead.destroy_all\\n\\n`;\n        seedsContent += `leads_data = [\\n`;\n        \n        // Convert each lead to Ruby hash format\n        allLeads.forEach((lead, index) => {\n            seedsContent += `  {\\n`;\n            seedsContent += `    name: ${rubyString(lead.name)},\\n`;\n            seedsContent += `    company: ${rubyString(lead.company)},\\n`;\n            seedsContent += `    phone: ${rubyString(lead.phone)},\\n`;\n            seedsContent += `    website: ${rubyString(lead.website)},\\n`;\n            seedsContent += `    state_province: ${rubyString(lead.state_province)},\\n`;\n            seedsContent += `    lead_source: ${rubyString(lead.lead_source || 'web')},\\n`;\n            seedsContent += `    email: ${rubyString(lead.email)},\\n`;\n            seedsContent += `    lead_status: ${rubyString(lead.lead_status || 'Open - Not Contacted')},\\n`;\n            \n            // Handle date parsing\n            if (lead.created_date) {\n                seedsContent += `    created_date: DateTime.parse('${lead.created_date}'),\\n`;\n            } else {\n                seedsContent += `    created_date: DateTime.now,\\n`;\n            }\n            \n            seedsContent += `    owner_alias: ${rubyString(lead.owner_alias || 'MDL')},\\n`;\n            seedsContent += `    unread_by_owner: ${lead.unread_by_owner === true ? 'true' : 'false'}\\n`;\n            seedsContent += `  }${index < allLeads.length - 1 ? ',' : ''}\\n`;\n        });\n        \n        seedsContent += `]\\n\\n`;\n        seedsContent += `# Create leads in batches for better performance\\n`;\n        seedsContent += `puts \"Creating #{leads_data.length} leads...\"\\n`;\n        seedsContent += `created_count = 0\\n`;\n        seedsContent += `error_count = 0\\n\\n`;\n        seedsContent += `leads_data.each_slice(100) do |batch|\\n`;\n        seedsContent += `  begin\\n`;\n        seedsContent += `    Lead.create!(batch)\\n`;\n        seedsContent += `    created_count += batch.length\\n`;\n        seedsContent += `    print \".\"\\n`;\n        seedsContent += `  rescue => e\\n`;\n        seedsContent += `    puts \"\\\\nError creating batch: #{e.message}\"\\n`;\n        seedsContent += `    # Try individual creates for this batch\\n`;\n        seedsContent += `    batch.each do |lead_attrs|\\n`;\n        seedsContent += `      begin\\n`;\n        seedsContent += `        Lead.create!(lead_attrs)\\n`;\n        seedsContent += `        created_count += 1\\n`;\n        seedsContent += `      rescue => individual_error\\n`;\n        seedsContent += `        puts \"Failed to create lead: #{lead_attrs[:phone]} - #{individual_error.message}\"\\n`;\n        seedsContent += `        error_count += 1\\n`;\n        seedsContent += `      end\\n`;\n        seedsContent += `    end\\n`;\n        seedsContent += `  end\\n`;\n        seedsContent += `end\\n\\n`;\n        seedsContent += `puts \"\\\\nCompleted! Created #{created_count} leads. Errors: #{error_count}\"\\n`;\n        \n        // Write seeds.rb to S3\n        const timestamp = new Date().toISOString().replace(/:/g, '-');\n        const seedsKey = `rails-seeds/${timestamp}/seeds.rb`;\n        \n        await s3.putObject({\n            Bucket: OUTPUT_BUCKET,\n            Key: seedsKey,\n            Body: seedsContent,\n            ContentType: 'text/plain'\n        }).promise();\n        \n        console.log(`Generated seeds.rb with ${allLeads.length} leads`);\n        \n        // Also generate a smaller sample seeds file for testing\n        const sampleLeads = allLeads.slice(0, 25);\n        let sampleSeedsContent = `# Sample seeds.rb - First 25 leads for testing\\n`;\n        sampleSeedsContent += `# Generated on ${new Date().toISOString()}\\n\\n`;\n        sampleSeedsContent += `Lead.create!([\\n`;\n        \n        sampleLeads.forEach((lead, index) => {\n            sampleSeedsContent += `  {\\n`;\n            sampleSeedsContent += `    name: ${rubyString(lead.name)},\\n`;\n            sampleSeedsContent += `    company: ${rubyString(lead.company)},\\n`;\n            sampleSeedsContent += `    phone: ${rubyString(lead.phone)},\\n`;\n            sampleSeedsContent += `    website: ${rubyString(lead.website)},\\n`;\n            sampleSeedsContent += `    state_province: ${rubyString(lead.state_province)},\\n`;\n            sampleSeedsContent += `    lead_source: ${rubyString(lead.lead_source || 'web')},\\n`;\n            sampleSeedsContent += `    email: ${rubyString(lead.email)},\\n`;\n            sampleSeedsContent += `    lead_status: ${rubyString(lead.lead_status || 'Open - Not Contacted')},\\n`;\n            \n            if (lead.created_date) {\n                sampleSeedsContent += `    created_date: DateTime.parse('${lead.created_date}'),\\n`;\n            } else {\n                sampleSeedsContent += `    created_date: DateTime.now,\\n`;\n            }\n            \n            sampleSeedsContent += `    owner_alias: ${rubyString(lead.owner_alias || 'MDL')},\\n`;\n            sampleSeedsContent += `    unread_by_owner: ${lead.unread_by_owner === true ? 'true' : 'false'}\\n`;\n            sampleSeedsContent += `  }${index < sampleLeads.length - 1 ? ',' : ''}\\n`;\n        });\n        \n        sampleSeedsContent += `])\\n`;\n        \n        const sampleSeedsKey = `rails-seeds/${timestamp}/sample_seeds.rb`;\n        await s3.putObject({\n            Bucket: OUTPUT_BUCKET,\n            Key: sampleSeedsKey,\n            Body: sampleSeedsContent,\n            ContentType: 'text/plain'\n        }).promise();\n        \n        return {\n            statusCode: 200,\n            body: JSON.stringify({\n                message: 'Rails seeds.rb generated successfully',\n                summary: {\n                    totalLeads: allLeads.length,\n                    seedsLocation: `s3://${OUTPUT_BUCKET}/${seedsKey}`,\n                    sampleSeedsLocation: `s3://${OUTPUT_BUCKET}/${sampleSeedsKey}`\n                }\n            })\n        };\n        \n    } catch (error) {\n        console.error('Error generating seeds.rb:', error);\n        throw error;\n    }\n};\n\nfunction rubyString(value) {\n    if (value === null || value === undefined || value === '') {\n        return \"''\";\n    }\n    // Escape single quotes and wrap in single quotes\n    const escaped = String(value).replace(/'/g, \"\\\\'\");\n    return `'${escaped}'`;\n}"]}