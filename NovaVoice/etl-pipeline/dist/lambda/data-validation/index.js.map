{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lambda/data-validation/index.js"],"names":[],"mappings":"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","sourcesContent":["const AWS = require('aws-sdk');\nconst dynamodb = new AWS.DynamoDB.DocumentClient();\nconst s3 = new AWS.S3();\n\nconst TABLE_NAME = process.env.TABLE_NAME;\nconst OUTPUT_BUCKET = process.env.OUTPUT_BUCKET;\n\nexports.handler = async (event) => {\n    console.log('Starting data validation');\n    \n    try {\n        const validationResults = {\n            timestamp: new Date().toISOString(),\n            checks: [],\n            warnings: [],\n            errors: []\n        };\n        \n        // Check 1: Count total items in DynamoDB\n        const scanParams = {\n            TableName: TABLE_NAME,\n            Select: 'COUNT'\n        };\n        \n        let totalCount = 0;\n        let lastEvaluatedKey = null;\n        \n        do {\n            if (lastEvaluatedKey) {\n                scanParams.ExclusiveStartKey = lastEvaluatedKey;\n            }\n            \n            const scanResult = await dynamodb.scan(scanParams).promise();\n            totalCount += scanResult.Count;\n            lastEvaluatedKey = scanResult.LastEvaluatedKey;\n        } while (lastEvaluatedKey);\n        \n        validationResults.checks.push({\n            name: 'Total items in DynamoDB',\n            value: totalCount,\n            status: totalCount > 0 ? 'PASS' : 'FAIL'\n        });\n        \n        // Check 2: Sample data quality checks\n        const sampleParams = {\n            TableName: TABLE_NAME,\n            Limit: 100\n        };\n        \n        const sampleResult = await dynamodb.scan(sampleParams).promise();\n        const sampleItems = sampleResult.Items;\n        \n        // Validate phone number formats\n        let validPhones = 0;\n        let invalidPhones = [];\n        const phoneRegex = /^\\+1 \\(\\d{3}\\) \\d{3}-\\d{4}$/;\n        \n        sampleItems.forEach(item => {\n            if (phoneRegex.test(item.phone)) {\n                validPhones++;\n            } else {\n                invalidPhones.push({\n                    phone: item.phone,\n                    name: item.name\n                });\n            }\n        });\n        \n        validationResults.checks.push({\n            name: 'Phone format validation (sample)',\n            validCount: validPhones,\n            invalidCount: invalidPhones.length,\n            sampleSize: sampleItems.length,\n            invalidExamples: invalidPhones.slice(0, 5),\n            status: invalidPhones.length === 0 ? 'PASS' : 'WARNING'\n        });\n        \n        // Check 3: Required fields completeness\n        const requiredFields = ['phone', 'lead_status', 'owner_alias', 'call_status'];\n        const fieldCompleteness = {};\n        \n        requiredFields.forEach(field => {\n            fieldCompleteness[field] = {\n                complete: 0,\n                missing: 0\n            };\n        });\n        \n        sampleItems.forEach(item => {\n            requiredFields.forEach(field => {\n                if (item[field] && item[field].trim() !== '') {\n                    fieldCompleteness[field].complete++;\n                } else {\n                    fieldCompleteness[field].missing++;\n                }\n            });\n        });\n        \n        validationResults.checks.push({\n            name: 'Required fields completeness',\n            fields: fieldCompleteness,\n            status: Object.values(fieldCompleteness).every(f => f.missing === 0) ? 'PASS' : 'WARNING'\n        });\n        \n        // Check 4: Check for duplicate phone numbers (using GSI query)\n        // This is a spot check - full duplicate detection would be expensive\n        const phoneCheckPromises = sampleItems.slice(0, 10).map(async (item) => {\n            const queryParams = {\n                TableName: TABLE_NAME,\n                KeyConditionExpression: 'phone = :phone',\n                ExpressionAttributeValues: {\n                    ':phone': item.phone\n                }\n            };\n            \n            try {\n                const result = await dynamodb.query(queryParams).promise();\n                return {\n                    phone: item.phone,\n                    count: result.Count\n                };\n            } catch (e) {\n                // Query might fail if phone is not properly indexed\n                return null;\n            }\n        });\n        \n        const phoneChecks = (await Promise.all(phoneCheckPromises)).filter(r => r !== null);\n        const duplicates = phoneChecks.filter(r => r.count > 1);\n        \n        if (duplicates.length > 0) {\n            validationResults.warnings.push({\n                type: 'Potential duplicates',\n                message: `Found ${duplicates.length} potential duplicate phone numbers in sample`,\n                examples: duplicates\n            });\n        }\n        \n        // Check 5: Email format validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        let validEmails = 0;\n        let invalidEmails = [];\n        let missingEmails = 0;\n        \n        sampleItems.forEach(item => {\n            if (!item.email || item.email.trim() === '') {\n                missingEmails++;\n            } else if (emailRegex.test(item.email)) {\n                validEmails++;\n            } else {\n                invalidEmails.push({\n                    email: item.email,\n                    name: item.name\n                });\n            }\n        });\n        \n        validationResults.checks.push({\n            name: 'Email validation (sample)',\n            validCount: validEmails,\n            invalidCount: invalidEmails.length,\n            missingCount: missingEmails,\n            sampleSize: sampleItems.length,\n            invalidExamples: invalidEmails.slice(0, 5),\n            status: invalidEmails.length === 0 ? 'PASS' : 'WARNING'\n        });\n        \n        // Check 6: Lead status distribution\n        const statusCounts = {};\n        sampleItems.forEach(item => {\n            const status = item.lead_status || 'Unknown';\n            statusCounts[status] = (statusCounts[status] || 0) + 1;\n        });\n        \n        validationResults.checks.push({\n            name: 'Lead status distribution',\n            distribution: statusCounts,\n            status: 'INFO'\n        });\n        \n        // Check 7: Call status distribution\n        const callStatusCounts = {};\n        sampleItems.forEach(item => {\n            const status = item.call_status || 'not_called';\n            callStatusCounts[status] = (callStatusCounts[status] || 0) + 1;\n        });\n        \n        validationResults.checks.push({\n            name: 'Call status distribution',\n            distribution: callStatusCounts,\n            expectedValue: 'not_called',\n            status: callStatusCounts['not_called'] === sampleItems.length ? 'PASS' : 'WARNING'\n        });\n        \n        // Generate validation report\n        const reportKey = `validation-reports/${new Date().toISOString().replace(/:/g, '-')}.json`;\n        await s3.putObject({\n            Bucket: OUTPUT_BUCKET,\n            Key: reportKey,\n            Body: JSON.stringify(validationResults, null, 2),\n            ContentType: 'application/json'\n        }).promise();\n        \n        // Determine overall validation status\n        const failedChecks = validationResults.checks.filter(c => c.status === 'FAIL');\n        const warningChecks = validationResults.checks.filter(c => c.status === 'WARNING');\n        \n        const overallStatus = failedChecks.length > 0 ? 'FAILED' : \n                             warningChecks.length > 0 ? 'PASSED_WITH_WARNINGS' : 'PASSED';\n        \n        console.log(`Validation completed with status: ${overallStatus}`);\n        \n        return {\n            statusCode: 200,\n            body: JSON.stringify({\n                message: 'Data validation completed',\n                status: overallStatus,\n                summary: {\n                    totalItems: totalCount,\n                    checksPerformed: validationResults.checks.length,\n                    failures: failedChecks.length,\n                    warnings: warningChecks.length,\n                    reportLocation: `s3://${OUTPUT_BUCKET}/${reportKey}`\n                }\n            })\n        };\n        \n    } catch (error) {\n        console.error('Error in data validation:', error);\n        throw error;\n    }\n};"]}