{"version":3,"file":"leads-etl-pipeline-stack.js","sourceRoot":"","sources":["../../lib/leads-etl-pipeline-stack.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cdk from 'aws-cdk-lib';\nimport * as s3 from 'aws-cdk-lib/aws-s3';\nimport * as dynamodb from 'aws-cdk-lib/aws-dynamodb';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as stepfunctions from 'aws-cdk-lib/aws-stepfunctions';\nimport * as sfnTasks from 'aws-cdk-lib/aws-stepfunctions-tasks';\nimport * as glue from '@aws-cdk/aws-glue-alpha';\nimport * as sns from 'aws-cdk-lib/aws-sns';\nimport * as snsSubscriptions from 'aws-cdk-lib/aws-sns-subscriptions';\nimport * as cloudwatch from 'aws-cdk-lib/aws-cloudwatch';\nimport * as logs from 'aws-cdk-lib/aws-logs';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nexport interface LeadsETLPipelineStackProps extends cdk.StackProps {\n  sourceBucket?: string;\n  sourceKey?: string;\n  notificationEmail?: string;\n}\n\nexport class LeadsETLPipelineStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: LeadsETLPipelineStackProps) {\n    super(scope, id, props);\n\n    // Configuration\n    const sourceBucket = props?.sourceBucket || 'globaloutreachevent.com';\n    const sourceKey = props?.sourceKey || 'leads.txt';\n    const notificationEmail = props?.notificationEmail || '';\n\n    // Create output bucket for processed data\n    const outputBucket = new s3.Bucket(this, 'LeadsProcessedOutput', {\n      bucketName: `leads-processed-output-${this.account}-${this.region}`,\n      versioned: true,\n      encryption: s3.BucketEncryption.S3_MANAGED,\n      removalPolicy: cdk.RemovalPolicy.RETAIN,\n      lifecycleRules: [\n        {\n          id: 'DeleteOldProcessedFiles',\n          expiration: cdk.Duration.days(90),\n          prefix: 'processed/'\n        }\n      ]\n    });\n\n    // Create scripts bucket for Glue scripts\n    const scriptsBucket = new s3.Bucket(this, 'GlueScriptsBucket', {\n      bucketName: `glue-scripts-${this.account}-${this.region}`,\n      versioned: true,\n      encryption: s3.BucketEncryption.S3_MANAGED,\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n      autoDeleteObjects: true\n    });\n\n    // Create DynamoDB table with phone as primary key\n    const churchesTable = new dynamodb.Table(this, 'ChurchesTable', {\n      tableName: 'Churches',\n      partitionKey: { name: 'phone', type: dynamodb.AttributeType.STRING },\n      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\n      pointInTimeRecovery: true,\n      removalPolicy: cdk.RemovalPolicy.RETAIN,\n      encryption: dynamodb.TableEncryption.AWS_MANAGED,\n      stream: dynamodb.StreamViewType.NEW_AND_OLD_IMAGES // Enable DynamoDB Streams for change tracking\n    });\n\n    // Add Global Secondary Indexes\n    churchesTable.addGlobalSecondaryIndex({\n      indexName: 'lead_status-index',\n      partitionKey: { name: 'lead_status', type: dynamodb.AttributeType.STRING },\n      projectionType: dynamodb.ProjectionType.ALL\n    });\n\n    churchesTable.addGlobalSecondaryIndex({\n      indexName: 'owner_alias-index',\n      partitionKey: { name: 'owner_alias', type: dynamodb.AttributeType.STRING },\n      projectionType: dynamodb.ProjectionType.ALL\n    });\n\n    // Create Glue IAM role\n    const glueRole = new iam.Role(this, 'GlueETLRole', {\n      assumedBy: new iam.ServicePrincipal('glue.amazonaws.com'),\n      managedPolicies: [\n        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSGlueServiceRole')\n      ]\n    });\n\n    // Grant Glue access to S3 buckets\n    glueRole.addToPolicy(new iam.PolicyStatement({\n      actions: ['s3:GetObject', 's3:ListBucket'],\n      resources: [\n        `arn:aws:s3:::${sourceBucket}`,\n        `arn:aws:s3:::${sourceBucket}/*`\n      ]\n    }));\n\n    outputBucket.grantReadWrite(glueRole);\n    scriptsBucket.grantRead(glueRole);\n\n    // Upload Glue script to S3\n    const glueScriptAsset = new cdk.aws_s3_deployment.BucketDeployment(this, 'GlueScriptDeployment', {\n      sources: [cdk.aws_s3_deployment.Source.asset(path.join(__dirname, '../glue-scripts'))],\n      destinationBucket: scriptsBucket,\n      destinationKeyPrefix: 'scripts/'\n    });\n\n    // Create Glue job using CfnJob\n    const glueJob = new cdk.aws_glue.CfnJob(this, 'LeadsParserJob', {\n      name: 'leads-parser-job',\n      role: glueRole.roleArn,\n      command: {\n        name: 'glueetl',\n        pythonVersion: '3',\n        scriptLocation: `s3://${scriptsBucket.bucketName}/scripts/parse-leads.py`\n      },\n      glueVersion: '4.0',\n      defaultArguments: {\n        '--SOURCE_BUCKET': sourceBucket,\n        '--SOURCE_KEY': sourceKey,\n        '--OUTPUT_BUCKET': outputBucket.bucketName,\n        '--enable-metrics': '',\n        '--enable-continuous-cloudwatch-log': 'true',\n        '--enable-spark-ui': 'true',\n        '--spark-event-logs-path': `s3://${outputBucket.bucketName}/spark-logs/`,\n        '--job-language': 'python'\n      },\n      maxRetries: 2,\n      timeout: 30, // minutes\n      executionProperty: {\n        maxConcurrentRuns: 1\n      }\n    });\n\n    glueJob.node.addDependency(glueScriptAsset);\n\n    // Create Lambda functions\n    const lambdaRole = new iam.Role(this, 'LambdaETLRole', {\n      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n      managedPolicies: [\n        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole')\n      ]\n    });\n\n    outputBucket.grantRead(lambdaRole);\n    churchesTable.grantReadWriteData(lambdaRole);\n\n    // DynamoDB Loader Lambda\n    const dynamoLoaderLambda = new lambda.Function(this, 'DynamoLoaderFunction', {\n      functionName: 'leads-dynamo-loader',\n      runtime: lambda.Runtime.NODEJS_20_X,\n      handler: 'index.handler',\n      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda/dynamo-loader')),\n      role: lambdaRole,\n      timeout: cdk.Duration.minutes(15),\n      memorySize: 1024,\n      environment: {\n        TABLE_NAME: churchesTable.tableName,\n        OUTPUT_BUCKET: outputBucket.bucketName\n      }\n    });\n\n    // Rails Seeds Generator Lambda\n    const seedsGeneratorLambda = new lambda.Function(this, 'SeedsGeneratorFunction', {\n      functionName: 'rails-seeds-generator',\n      runtime: lambda.Runtime.NODEJS_20_X,\n      handler: 'index.handler',\n      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda/seeds-generator')),\n      role: lambdaRole,\n      timeout: cdk.Duration.minutes(10),\n      memorySize: 512,\n      environment: {\n        OUTPUT_BUCKET: outputBucket.bucketName\n      }\n    });\n\n    // Data Validation Lambda\n    const validationLambda = new lambda.Function(this, 'DataValidationFunction', {\n      functionName: 'leads-data-validation',\n      runtime: lambda.Runtime.NODEJS_20_X,\n      handler: 'index.handler',\n      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda/data-validation')),\n      role: lambdaRole,\n      timeout: cdk.Duration.minutes(5),\n      memorySize: 256,\n      environment: {\n        TABLE_NAME: churchesTable.tableName,\n        OUTPUT_BUCKET: outputBucket.bucketName\n      }\n    });\n\n    // Create SNS topic for notifications\n    const notificationTopic = new sns.Topic(this, 'ETLNotificationTopic', {\n      topicName: 'leads-etl-notifications',\n      displayName: 'Leads ETL Pipeline Notifications'\n    });\n\n    if (notificationEmail) {\n      notificationTopic.addSubscription(\n        new snsSubscriptions.EmailSubscription(notificationEmail)\n      );\n    }\n\n    // Create Step Functions state machine\n    const glueTask = new sfnTasks.GlueStartJobRun(this, 'RunGlueETL', {\n      glueJobName: glueJob.name || 'leads-parser-job',\n      integrationPattern: stepfunctions.IntegrationPattern.RUN_JOB,\n      resultPath: '$.glueResult'\n    });\n\n    const dynamoLoaderTask = new sfnTasks.LambdaInvoke(this, 'LoadToDynamoDB', {\n      lambdaFunction: dynamoLoaderLambda,\n      outputPath: '$.Payload',\n      retryOnServiceExceptions: true\n    });\n\n    const seedsGeneratorTask = new sfnTasks.LambdaInvoke(this, 'GenerateRailsSeeds', {\n      lambdaFunction: seedsGeneratorLambda,\n      outputPath: '$.Payload',\n      retryOnServiceExceptions: true\n    });\n\n    const validationTask = new sfnTasks.LambdaInvoke(this, 'ValidateData', {\n      lambdaFunction: validationLambda,\n      outputPath: '$.Payload',\n      retryOnServiceExceptions: true\n    });\n\n    const successNotification = new sfnTasks.SnsPublish(this, 'SendSuccessNotification', {\n      topic: notificationTopic,\n      message: stepfunctions.TaskInput.fromText('ETL Pipeline completed successfully!')\n    });\n\n    const failureNotification = new sfnTasks.SnsPublish(this, 'SendFailureNotification', {\n      topic: notificationTopic,\n      message: stepfunctions.TaskInput.fromJsonPathAt('$.error')\n    });\n\n    // Define the workflow\n    const definition = glueTask\n      .next(dynamoLoaderTask)\n      .next(\n        new stepfunctions.Parallel(this, 'ParallelProcessing')\n          .branch(seedsGeneratorTask)\n          .branch(validationTask)\n      )\n      .next(successNotification);\n\n    // Add error handling\n    const errorHandler = new stepfunctions.Fail(this, 'ETLFailed', {\n      error: 'ETLPipelineError',\n      cause: 'Check CloudWatch Logs for details'\n    });\n\n    const definitionWithErrorHandling = new stepfunctions.Parallel(this, 'ETLPipelineWithErrorHandling')\n      .branch(definition)\n      .addCatch(failureNotification.next(errorHandler), {\n        errors: ['States.ALL'],\n        resultPath: '$.error'\n      });\n\n    const stateMachine = new stepfunctions.StateMachine(this, 'LeadsETLStateMachine', {\n      stateMachineName: 'leads-etl-pipeline',\n      definition: definitionWithErrorHandling,\n      timeout: cdk.Duration.hours(2),\n      tracingEnabled: true\n    });\n\n    // Create CloudWatch Dashboard\n    const dashboard = new cloudwatch.Dashboard(this, 'ETLDashboard', {\n      dashboardName: 'leads-etl-pipeline-dashboard'\n    });\n\n    dashboard.addWidgets(\n      new cloudwatch.GraphWidget({\n        title: 'Lambda Function Duration',\n        width: 12,\n        height: 6,\n        left: [\n          dynamoLoaderLambda.metricDuration(),\n          seedsGeneratorLambda.metricDuration(),\n          validationLambda.metricDuration()\n        ]\n      }),\n      new cloudwatch.GraphWidget({\n        title: 'DynamoDB Write Throttles',\n        width: 12,\n        height: 6,\n        left: [\n          churchesTable.metricUserErrors()\n        ]\n      })\n    );\n\n    // Outputs\n    new cdk.CfnOutput(this, 'OutputBucketName', {\n      value: outputBucket.bucketName,\n      description: 'S3 bucket for processed output files'\n    });\n\n    new cdk.CfnOutput(this, 'DynamoTableName', {\n      value: churchesTable.tableName,\n      description: 'DynamoDB table name for church leads'\n    });\n\n    new cdk.CfnOutput(this, 'StateMachineArn', {\n      value: stateMachine.stateMachineArn,\n      description: 'Step Functions state machine ARN'\n    });\n  }\n}"]}