{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lambda/dynamo-loader/index.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nconst AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\nconst dynamodb = new AWS.DynamoDB.DocumentClient();\nconst TABLE_NAME = process.env.TABLE_NAME;\nconst OUTPUT_BUCKET = process.env.OUTPUT_BUCKET;\nconst BATCH_SIZE = 25; // DynamoDB batch write limit\nexports.handler = async (event) => {\n    console.log('Starting DynamoDB loader');\n    try {\n        // Get the latest processed files from S3\n        const listParams = {\n            Bucket: OUTPUT_BUCKET,\n            Prefix: 'dynamodb/',\n            MaxKeys: 1000\n        };\n        const listResult = await s3.listObjectsV2(listParams).promise();\n        if (!listResult.Contents || listResult.Contents.length === 0) {\n            throw new Error('No DynamoDB files found in output bucket');\n        }\n        // Find the most recent items.json file\n        const sortedFiles = listResult.Contents\n            .filter(obj => obj.Key.endsWith('items.json'))\n            .sort((a, b) => b.LastModified - a.LastModified);\n        if (sortedFiles.length === 0) {\n            throw new Error('No items.json file found');\n        }\n        const latestFile = sortedFiles[0];\n        console.log(`Processing file: ${latestFile.Key}`);\n        // Read the JSON file\n        const getParams = {\n            Bucket: OUTPUT_BUCKET,\n            Key: latestFile.Key\n        };\n        const fileContent = await s3.getObject(getParams).promise();\n        const lines = fileContent.Body.toString().trim().split('\\n');\n        console.log(`Found ${lines.length} items to process`);\n        // Process items in batches\n        let successCount = 0;\n        let errorCount = 0;\n        const errors = [];\n        for (let i = 0; i < lines.length; i += BATCH_SIZE) {\n            const batch = lines.slice(i, i + BATCH_SIZE);\n            const putRequests = [];\n            for (const line of batch) {\n                try {\n                    const item = JSON.parse(line);\n                    // Validate required fields\n                    if (!item.phone) {\n                        errors.push({\n                            index: i + batch.indexOf(line),\n                            error: 'Missing phone number',\n                            item: item\n                        });\n                        errorCount++;\n                        continue;\n                    }\n                    // Convert to DynamoDB format\n                    const dynamoItem = {\n                        phone: item.phone,\n                        name: item.name || '',\n                        company: item.company || '',\n                        email: item.email || '',\n                        website: item.website || '',\n                        state_province: item.state_province || '',\n                        lead_source: item.lead_source || 'web',\n                        lead_status: item.lead_status || 'Open - Not Contacted',\n                        created_date: item.created_date || new Date().toISOString(),\n                        owner_alias: item.owner_alias || 'MDL',\n                        unread_by_owner: item.unread_by_owner === true,\n                        call_transcript: item.call_transcript || '',\n                        last_call_date: item.last_call_date || '',\n                        call_status: item.call_status || 'not_called',\n                        // Add metadata\n                        imported_at: new Date().toISOString(),\n                        import_batch: latestFile.Key\n                    };\n                    putRequests.push({\n                        PutRequest: {\n                            Item: dynamoItem\n                        }\n                    });\n                }\n                catch (e) {\n                    errors.push({\n                        index: i + batch.indexOf(line),\n                        error: e.message,\n                        line: line.substring(0, 200)\n                    });\n                    errorCount++;\n                }\n            }\n            // Write batch to DynamoDB\n            if (putRequests.length > 0) {\n                try {\n                    const batchParams = {\n                        RequestItems: {\n                            [TABLE_NAME]: putRequests\n                        }\n                    };\n                    const result = await dynamodb.batchWrite(batchParams).promise();\n                    // Handle unprocessed items\n                    if (result.UnprocessedItems &&\n                        result.UnprocessedItems[TABLE_NAME] &&\n                        result.UnprocessedItems[TABLE_NAME].length > 0) {\n                        // Retry unprocessed items with exponential backoff\n                        let retryCount = 0;\n                        let unprocessed = result.UnprocessedItems[TABLE_NAME];\n                        while (unprocessed.length > 0 && retryCount < 3) {\n                            await new Promise(resolve => setTimeout(resolve, Math.pow(2, retryCount) * 1000));\n                            const retryResult = await dynamodb.batchWrite({\n                                RequestItems: {\n                                    [TABLE_NAME]: unprocessed\n                                }\n                            }).promise();\n                            unprocessed = retryResult.UnprocessedItems?.[TABLE_NAME] || [];\n                            retryCount++;\n                        }\n                        if (unprocessed.length > 0) {\n                            errorCount += unprocessed.length;\n                            errors.push({\n                                error: 'Failed to process after retries',\n                                count: unprocessed.length\n                            });\n                        }\n                        else {\n                            successCount += putRequests.length;\n                        }\n                    }\n                    else {\n                        successCount += putRequests.length;\n                    }\n                }\n                catch (e) {\n                    console.error('Batch write error:', e);\n                    errorCount += putRequests.length;\n                    errors.push({\n                        error: 'Batch write failed',\n                        message: e.message,\n                        batchStart: i,\n                        batchSize: putRequests.length\n                    });\n                }\n            }\n            // Log progress\n            if ((i + BATCH_SIZE) % 100 === 0) {\n                console.log(`Processed ${i + BATCH_SIZE} items...`);\n            }\n        }\n        // Write results summary\n        const summary = {\n            timestamp: new Date().toISOString(),\n            sourceFile: latestFile.Key,\n            totalItems: lines.length,\n            successCount: successCount,\n            errorCount: errorCount,\n            errors: errors.slice(0, 100) // First 100 errors\n        };\n        const summaryKey = `dynamo-load-summary/${new Date().toISOString().replace(/:/g, '-')}.json`;\n        await s3.putObject({\n            Bucket: OUTPUT_BUCKET,\n            Key: summaryKey,\n            Body: JSON.stringify(summary, null, 2),\n            ContentType: 'application/json'\n        }).promise();\n        console.log(`DynamoDB load completed. Success: ${successCount}, Errors: ${errorCount}`);\n        return {\n            statusCode: 200,\n            body: JSON.stringify({\n                message: 'DynamoDB load completed',\n                summary: {\n                    totalItems: lines.length,\n                    successCount: successCount,\n                    errorCount: errorCount,\n                    summaryLocation: `s3://${OUTPUT_BUCKET}/${summaryKey}`\n                }\n            })\n        };\n    }\n    catch (error) {\n        console.error('Error in DynamoDB loader:', error);\n        throw error;\n    }\n};\n//# sourceMappingURL=index.js.map"]}