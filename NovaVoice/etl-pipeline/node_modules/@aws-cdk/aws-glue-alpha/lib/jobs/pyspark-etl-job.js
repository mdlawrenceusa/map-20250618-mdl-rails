"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PySparkEtlJob = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_glue_1 = require("aws-cdk-lib/aws-glue");
const constants_1 = require("../constants");
const spark_job_1 = require("./spark-job");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
const prop_injectable_1 = require("aws-cdk-lib/core/lib/prop-injectable");
/**
 * PySpark ETL Jobs class
 *
 * ETL jobs support pySpark and Scala languages, for which there are separate
 * but similar constructors. ETL jobs default to the G2 worker type, but you
 * can override this default with other supported worker type values
 * (G1, G2, G4 and G8). ETL jobs defaults to Glue version 4.0, which you can
 * override to 3.0. The following ETL features are enabled by default:
 * —enable-metrics, —enable-spark-ui, —enable-continuous-cloudwatch-log.
 * You can find more details about version, worker type and other features
 * in Glue's public documentation.
 */
let PySparkEtlJob = class PySparkEtlJob extends spark_job_1.SparkJob {
    /**
     * PySparkEtlJob constructor
     */
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_PySparkEtlJobProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, PySparkEtlJob);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        // Combine command line arguments into a single line item
        const defaultArguments = {
            ...this.executableArguments(props),
            ...this.nonExecutableCommonArguments(props),
        };
        const jobResource = new aws_glue_1.CfnJob(this, 'Resource', {
            name: props.jobName,
            description: props.description,
            role: this.role.roleArn,
            command: {
                name: constants_1.JobType.ETL,
                scriptLocation: this.codeS3ObjectUrl(props.script),
                pythonVersion: constants_1.PythonVersion.THREE,
            },
            glueVersion: props.glueVersion ?? constants_1.GlueVersion.V4_0,
            workerType: props.workerType ?? constants_1.WorkerType.G_1X,
            numberOfWorkers: props.numberOfWorkers ? props.numberOfWorkers : 10,
            maxRetries: props.jobRunQueuingEnabled ? 0 : props.maxRetries,
            jobRunQueuingEnabled: props.jobRunQueuingEnabled ? props.jobRunQueuingEnabled : false,
            executionProperty: props.maxConcurrentRuns ? { maxConcurrentRuns: props.maxConcurrentRuns } : undefined,
            timeout: props.timeout?.toMinutes(),
            connections: props.connections ? { connections: props.connections.map((connection) => connection.connectionName) } : undefined,
            securityConfiguration: props.securityConfiguration?.securityConfigurationName,
            tags: props.tags,
            defaultArguments,
        });
        const resourceName = this.getResourceNameAttribute(jobResource.ref);
        this.jobArn = this.buildJobArn(this, resourceName);
        this.jobName = resourceName;
    }
    /**
     * Set the executable arguments with best practices enabled by default
     *
     * @returns An array of arguments for Glue to use on execution
     */
    executableArguments(props) {
        const args = {};
        args['--job-language'] = constants_1.JobLanguage.PYTHON;
        this.setupExtraCodeArguments(args, props);
        return args;
    }
};
exports.PySparkEtlJob = PySparkEtlJob;
_a = JSII_RTTI_SYMBOL_1;
PySparkEtlJob[_a] = { fqn: "@aws-cdk/aws-glue-alpha.PySparkEtlJob", version: "2.202.0-alpha.0" };
/** Uniquely identifies this class. */
PySparkEtlJob.PROPERTY_INJECTION_ID = '@aws-cdk.aws-glue-alpha.PySparkEtlJob';
exports.PySparkEtlJob = PySparkEtlJob = __decorate([
    prop_injectable_1.propertyInjectable
], PySparkEtlJob);
//# sourceMappingURL=data:application/json;base64,