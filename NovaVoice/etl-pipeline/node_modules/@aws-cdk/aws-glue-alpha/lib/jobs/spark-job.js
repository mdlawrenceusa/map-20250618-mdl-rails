"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SparkJob = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const s3 = require("aws-cdk-lib/aws-s3");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
const job_1 = require("./job");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const os_1 = require("os");
/**
 * Base class for different types of Spark Jobs.
 */
class SparkJob extends job_1.Job {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.jobName,
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_SparkJobProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, SparkJob);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        this.role = props.role;
        this.grantPrincipal = this.role;
        this.sparkUILoggingLocation = props.sparkUI ? this.setupSparkUILoggingLocation(props.sparkUI) : undefined;
    }
    nonExecutableCommonArguments(props) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_SparkJobProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.nonExecutableCommonArguments);
            }
            throw error;
        }
        // Enable CloudWatch metrics and continuous logging by default as a best practice
        const continuousLoggingArgs = this.setupContinuousLogging(this.role, props.continuousLogging);
        const profilingMetricsArgs = { '--enable-metrics': '' };
        const observabilityMetricsArgs = { '--enable-observability-metrics': 'true' };
        // Set spark ui args, if spark ui logging had been setup
        const sparkUIArgs = this.sparkUILoggingLocation ? ({
            '--enable-spark-ui': 'true',
            '--spark-event-logs-path': this.sparkUILoggingLocation.bucket.s3UrlForObject(this.sparkUILoggingLocation.prefix).replace(/\/?$/, '/'), // path will always end with a slash
        }) : {};
        return {
            ...continuousLoggingArgs,
            ...profilingMetricsArgs,
            ...observabilityMetricsArgs,
            ...sparkUIArgs,
            ...this.checkNoReservedArgs(props.defaultArguments),
        };
    }
    /**
     * Set the arguments for extra {@link Code}-related properties
     */
    setupExtraCodeArguments(args, props) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_SparkExtraCodeProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.setupExtraCodeArguments);
            }
            throw error;
        }
        if (props.extraJars && props.extraJars.length > 0) {
            args['--extra-jars'] = props.extraJars.map(code => this.codeS3ObjectUrl(code)).join(',');
        }
        if (props.extraJarsFirst) {
            args['--user-jars-first'] = 'true';
        }
        if (props.extraPythonFiles && props.extraPythonFiles.length > 0) {
            args['--extra-py-files'] = props.extraPythonFiles.map(code => this.codeS3ObjectUrl(code)).join(',');
        }
        if (props.extraFiles && props.extraFiles.length > 0) {
            args['--extra-files'] = props.extraFiles.map(code => this.codeS3ObjectUrl(code)).join(',');
        }
    }
    setupSparkUILoggingLocation(props) {
        validateSparkUiPrefix(props.prefix);
        const bucket = props.bucket ?? new s3.Bucket(this, 'SparkUIBucket', { enforceSSL: true, encryption: s3.BucketEncryption.S3_MANAGED });
        bucket.grantReadWrite(this, cleanSparkUiPrefixForGrant(props.prefix));
        return {
            prefix: props.prefix,
            bucket,
        };
    }
}
exports.SparkJob = SparkJob;
_a = JSII_RTTI_SYMBOL_1;
SparkJob[_a] = { fqn: "@aws-cdk/aws-glue-alpha.SparkJob", version: "2.202.0-alpha.0" };
function validateSparkUiPrefix(prefix) {
    if (!prefix || aws_cdk_lib_1.Token.isUnresolved(prefix)) {
        // skip validation if prefix is not specified or is a token
        return;
    }
    const errors = [];
    if (!prefix.startsWith('/')) {
        errors.push('Prefix must begin with \'/\'');
    }
    if (prefix.endsWith('/')) {
        errors.push('Prefix must not end with \'/\'');
    }
    if (errors.length > 0) {
        throw new Error(`Invalid prefix format (value: ${prefix})${os_1.EOL}${errors.join(os_1.EOL)}`);
    }
}
function cleanSparkUiPrefixForGrant(prefix) {
    return prefix !== undefined ? prefix.slice(1) + '/*' : undefined;
}
//# sourceMappingURL=data:application/json;base64,