"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PythonShellJob = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_glue_1 = require("aws-cdk-lib/aws-glue");
const job_1 = require("./job");
const constants_1 = require("../constants");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
const prop_injectable_1 = require("aws-cdk-lib/core/lib/prop-injectable");
/**
 * Python Shell Jobs class
 *
 * A Python shell job runs Python scripts as a shell and supports a Python version that
 * depends on the AWS Glue version you are using.
 * This can be used to schedule and run tasks that don't require an Apache Spark environment.
 */
let PythonShellJob = class PythonShellJob extends job_1.Job {
    /**
     * PythonShellJob constructor
     */
    constructor(scope, id, props) {
        super(scope, id, { physicalName: props.jobName });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_PythonShellJobProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, PythonShellJob);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        // Set up role and permissions for principal
        this.role = props.role;
        this.grantPrincipal = this.role;
        // Enable CloudWatch metrics and continuous logging by default as a best practice
        const continuousLoggingArgs = this.setupContinuousLogging(this.role, props.continuousLogging);
        const profilingMetricsArgs = { '--enable-metrics': '' };
        const observabilityMetricsArgs = { '--enable-observability-metrics': 'true' };
        // Gather executable arguments
        const executableArgs = this.executableArguments(props);
        // Combine command line arguments into a single line item
        const defaultArguments = {
            ...executableArgs,
            ...continuousLoggingArgs,
            ...profilingMetricsArgs,
            ...observabilityMetricsArgs,
            ...this.checkNoReservedArgs(props.defaultArguments),
        };
        const jobResource = new aws_glue_1.CfnJob(this, 'Resource', {
            name: props.jobName,
            description: props.description,
            role: this.role.roleArn,
            command: {
                name: constants_1.JobType.PYTHON_SHELL,
                scriptLocation: this.codeS3ObjectUrl(props.script),
                pythonVersion: props.pythonVersion ? props.pythonVersion : constants_1.PythonVersion.THREE_NINE,
            },
            glueVersion: props.glueVersion ? props.glueVersion : constants_1.GlueVersion.V3_0,
            maxCapacity: props.maxCapacity ? props.maxCapacity : constants_1.MaxCapacity.DPU_1_16TH,
            maxRetries: props.jobRunQueuingEnabled ? 0 : props.maxRetries ? props.maxRetries : 0,
            jobRunQueuingEnabled: props.jobRunQueuingEnabled ? props.jobRunQueuingEnabled : false,
            executionProperty: props.maxConcurrentRuns ? { maxConcurrentRuns: props.maxConcurrentRuns } : undefined,
            timeout: props.timeout?.toMinutes(),
            connections: props.connections ? { connections: props.connections.map((connection) => connection.connectionName) } : undefined,
            securityConfiguration: props.securityConfiguration?.securityConfigurationName,
            tags: props.tags,
            defaultArguments,
        });
        const resourceName = this.getResourceNameAttribute(jobResource.ref);
        this.jobArn = this.buildJobArn(this, resourceName);
        this.jobName = resourceName;
    }
    /**
     * Set the executable arguments with best practices enabled by default
     *
     * @returns An array of arguments for Glue to use on execution
     */
    executableArguments(props) {
        const args = {};
        args['--job-language'] = constants_1.JobLanguage.PYTHON;
        // If no Python version set (default 3.9) or the version is set to 3.9 then set library-set argument
        if (!props.pythonVersion || props.pythonVersion == constants_1.PythonVersion.THREE_NINE) {
            // Selecting this option includes common libraries for Python 3.9
            args['library-set'] = 'analytics';
        }
        return args;
    }
};
exports.PythonShellJob = PythonShellJob;
_a = JSII_RTTI_SYMBOL_1;
PythonShellJob[_a] = { fqn: "@aws-cdk/aws-glue-alpha.PythonShellJob", version: "2.202.0-alpha.0" };
/** Uniquely identifies this class. */
PythonShellJob.PROPERTY_INJECTION_ID = '@aws-cdk.aws-glue-alpha.PythonShellJob';
exports.PythonShellJob = PythonShellJob = __decorate([
    prop_injectable_1.propertyInjectable
], PythonShellJob);
//# sourceMappingURL=data:application/json;base64,