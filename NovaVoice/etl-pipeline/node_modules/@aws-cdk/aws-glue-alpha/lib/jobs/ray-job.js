"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RayJob = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_glue_1 = require("aws-cdk-lib/aws-glue");
const job_1 = require("./job");
const constants_1 = require("../constants");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
const prop_injectable_1 = require("aws-cdk-lib/core/lib/prop-injectable");
/**
 * Ray Jobs class
 *
 * Glue Ray jobs use worker type Z.2X and Glue version 4.0.
 * These are not overrideable since these are the only configuration that
 * Glue Ray jobs currently support. The runtime defaults to Ray2.4 and min
 * workers defaults to 3.
 */
let RayJob = class RayJob extends job_1.Job {
    /**
     * RayJob constructor
     */
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.jobName,
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_RayJobProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, RayJob);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        this.jobName = props.jobName ?? '';
        // Set up role and permissions for principal
        this.role = props.role;
        this.grantPrincipal = this.role;
        // Enable CloudWatch metrics and continuous logging by default as a best practice
        const continuousLoggingArgs = this.setupContinuousLogging(this.role, props.continuousLogging);
        const profilingMetricsArgs = { '--enable-metrics': '' };
        const observabilityMetricsArgs = { '--enable-observability-metrics': 'true' };
        // Combine command line arguments into a single line item
        const defaultArguments = {
            ...this.checkNoReservedArgs(props.defaultArguments),
            ...continuousLoggingArgs,
            ...profilingMetricsArgs,
            ...observabilityMetricsArgs,
        };
        if (props.workerType && props.workerType !== constants_1.WorkerType.Z_2X) {
            throw new Error('Ray jobs only support Z.2X worker type');
        }
        const jobResource = new aws_glue_1.CfnJob(this, 'Resource', {
            name: props.jobName,
            description: props.description,
            role: this.role.roleArn,
            command: {
                name: constants_1.JobType.RAY,
                scriptLocation: this.codeS3ObjectUrl(props.script),
                runtime: props.runtime ? props.runtime : constants_1.Runtime.RAY_TWO_FOUR,
            },
            glueVersion: constants_1.GlueVersion.V4_0,
            workerType: props.workerType ? props.workerType : constants_1.WorkerType.Z_2X,
            numberOfWorkers: props.numberOfWorkers ? props.numberOfWorkers : 3,
            maxRetries: props.jobRunQueuingEnabled ? 0 : props.maxRetries,
            jobRunQueuingEnabled: props.jobRunQueuingEnabled ? props.jobRunQueuingEnabled : false,
            executionProperty: props.maxConcurrentRuns ? { maxConcurrentRuns: props.maxConcurrentRuns } : undefined,
            timeout: props.timeout?.toMinutes(),
            connections: props.connections ? { connections: props.connections.map((connection) => connection.connectionName) } : undefined,
            securityConfiguration: props.securityConfiguration?.securityConfigurationName,
            tags: props.tags,
            defaultArguments,
        });
        const resourceName = this.getResourceNameAttribute(jobResource.ref);
        this.jobArn = this.buildJobArn(this, resourceName);
        this.jobName = resourceName;
    }
};
exports.RayJob = RayJob;
_a = JSII_RTTI_SYMBOL_1;
RayJob[_a] = { fqn: "@aws-cdk/aws-glue-alpha.RayJob", version: "2.202.0-alpha.0" };
/** Uniquely identifies this class. */
RayJob.PROPERTY_INJECTION_ID = '@aws-cdk.aws-glue-alpha.RayJob';
exports.RayJob = RayJob = __decorate([
    prop_injectable_1.propertyInjectable
], RayJob);
//# sourceMappingURL=data:application/json;base64,