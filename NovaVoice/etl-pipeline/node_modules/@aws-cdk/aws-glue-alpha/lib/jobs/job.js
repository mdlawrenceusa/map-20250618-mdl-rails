"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Job = exports.JobBase = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cloudwatch = require("aws-cdk-lib/aws-cloudwatch");
const events = require("aws-cdk-lib/aws-events");
const iam = require("aws-cdk-lib/aws-iam");
const cdk = require("aws-cdk-lib/core");
const constants_1 = require("../constants");
/**
 * A base class is needed to be able to import existing Jobs into a CDK app to
 * reference as part of a larger stack or construct. JobBase has the subset
 * of attributes required to identify and reference an existing Glue Job,
 * as well as some CloudWatch metric convenience functions to configure an
 * event-driven flow using the job.
 */
class JobBase extends cdk.Resource {
    /**
     * Create a CloudWatch Event Rule for this Glue Job when it's in a given state
     *
     * @param id construct id
     * @param options event options. Note that some values are overridden if provided, these are
     *  - eventPattern.source = ['aws.glue']
     *  - eventPattern.detailType = ['Glue Job State Change', 'Glue Job Run Status']
     *  - eventPattern.detail.jobName = [this.jobName]
     *
     * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html#glue-event-types
     */
    onEvent(id, options = {}) {
        const rule = new events.Rule(this, id, options);
        rule.addTarget(options.target);
        rule.addEventPattern({
            source: ['aws.glue'],
            detailType: ['Glue Job State Change', 'Glue Job Run Status'],
            detail: {
                jobName: [this.jobName],
            },
        });
        return rule;
    }
    /**
     * Create a CloudWatch Event Rule for the transition into the input jobState.
     *
     * @param id construct id.
     * @param jobState the job state.
     * @param options optional event options.
     */
    onStateChange(id, jobState, options = {}) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_JobState(jobState);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.onStateChange);
            }
            throw error;
        }
        const rule = this.onEvent(id, {
            description: `Rule triggered when Glue job ${this.jobName} is in ${jobState} state`,
            ...options,
        });
        rule.addEventPattern({
            detail: {
                state: [jobState],
            },
        });
        return rule;
    }
    /**
     * Create a CloudWatch Event Rule matching JobState.SUCCEEDED.
     *
     * @param id construct id.
     * @param options optional event options. default is {}.
     */
    onSuccess(id, options = {}) {
        return this.onStateChange(id, constants_1.JobState.SUCCEEDED, options);
    }
    /**
     * Return a CloudWatch Event Rule matching FAILED state.
     *
     * @param id construct id.
     * @param options optional event options. default is {}.
     */
    onFailure(id, options = {}) {
        return this.onStateChange(id, constants_1.JobState.FAILED, options);
    }
    /**
     * Return a CloudWatch Event Rule matching TIMEOUT state.
     *
     * @param id construct id.
     * @param options optional event options. default is {}.
     */
    onTimeout(id, options = {}) {
        return this.onStateChange(id, constants_1.JobState.TIMEOUT, options);
    }
    /**
     * Create a CloudWatch metric.
     *
     * @param metricName name of the metric typically prefixed with `glue.driver.`, `glue.<executorId>.` or `glue.ALL.`.
     * @param type the metric type.
     * @param props metric options.
     *
     * @see https://docs.aws.amazon.com/glue/latest/dg/monitoring-awsglue-with-cloudwatch-metrics.html
     */
    metric(metricName, type, props) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_MetricType(type);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.metric);
            }
            throw error;
        }
        return new cloudwatch.Metric({
            metricName,
            namespace: 'Glue',
            dimensionsMap: {
                JobName: this.jobName,
                JobRunId: 'ALL',
                Type: type,
            },
            ...props,
        }).attachTo(this);
    }
    /**
     * Return a CloudWatch Metric indicating job success.
     *
     * This metric is based on the Rule returned by no-args onSuccess() call.
     */
    metricSuccess(props) {
        return metricRule(this.metricJobStateRule('SuccessMetricRule', constants_1.JobState.SUCCEEDED), props);
    }
    /**
     * Return a CloudWatch Metric indicating job failure.
     *
     * This metric is based on the Rule returned by no-args onFailure() call.
     */
    metricFailure(props) {
        return metricRule(this.metricJobStateRule('FailureMetricRule', constants_1.JobState.FAILED), props);
    }
    /**
     * Return a CloudWatch Metric indicating job timeout.
     *
     * This metric is based on the Rule returned by no-args onTimeout() call.
     */
    metricTimeout(props) {
        return metricRule(this.metricJobStateRule('TimeoutMetricRule', constants_1.JobState.TIMEOUT), props);
    }
    /**
     * Creates or retrieves a singleton event rule for the input job state for use with the metric JobState methods.
     *
     * @param id construct id.
     * @param jobState the job state.
     */
    metricJobStateRule(id, jobState) {
        return this.node.tryFindChild(id) ?? this.onStateChange(id, jobState);
    }
    /**
     * Returns the job arn
     */
    buildJobArn(scope, jobName) {
        return cdk.Stack.of(scope).formatArn({
            service: 'glue',
            resource: 'job',
            resourceName: jobName,
        });
    }
}
exports.JobBase = JobBase;
_a = JSII_RTTI_SYMBOL_1;
JobBase[_a] = { fqn: "@aws-cdk/aws-glue-alpha.JobBase", version: "2.202.0-alpha.0" };
/**
 * A Glue Job.
 * @resource AWS::Glue::Job
 */
class Job extends JobBase {
    /**
     * Identifies an existing Glue Job from a subset of attributes that can
     * be referenced from within another Stack or Construct.
     *
     * @param scope The scope creating construct (usually `this`)
     * @param id The construct's id.
     * @param attrs Attributes for the Glue Job we want to import
     */
    static fromJobAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_JobAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromJobAttributes);
            }
            throw error;
        }
        class Import extends JobBase {
            constructor() {
                super(...arguments);
                this.jobName = attrs.jobName;
                this.jobArn = this.buildJobArn(scope, attrs.jobName);
                this.grantPrincipal = attrs.role ?? new iam.UnknownPrincipal({ resource: this });
            }
        }
        return new Import(scope, id);
    }
    /**
     * Check no usage of reserved arguments.
     *
     * @see https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html
     */
    checkNoReservedArgs(defaultArguments) {
        if (defaultArguments) {
            const reservedArgs = new Set(['--debug', '--mode', '--JOB_NAME']);
            Object.keys(defaultArguments).forEach((arg) => {
                if (reservedArgs.has(arg)) {
                    throw new Error(`The ${arg} argument is reserved by Glue. Don't set it`);
                }
            });
        }
        return defaultArguments;
    }
    /**
     * Setup Continuous Logging Properties
     * @param role The IAM role to use for continuous logging
     * @param props The properties for continuous logging configuration
     * @returns String containing the args for the continuous logging command
     */
    setupContinuousLogging(role, props) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_ContinuousLoggingProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.setupContinuousLogging);
            }
            throw error;
        }
        // If the developer has explicitly disabled continuous logging return no args
        if (props && !props.enabled) {
            return {};
        }
        // Else we turn on continuous logging by default. Determine what log group to use.
        const args = {
            '--enable-continuous-cloudwatch-log': 'true',
        };
        if (props?.quiet) {
            args['--enable-continuous-log-filter'] = 'true';
        }
        // If the developer provided a log group, add its name to the args and update the role.
        if (props?.logGroup) {
            args['--continuous-log-logGroup'] = props.logGroup.logGroupName;
            props.logGroup.grantWrite(role);
        }
        if (props?.logStreamPrefix) {
            args['--continuous-log-logStreamPrefix'] = props.logStreamPrefix;
        }
        if (props?.conversionPattern) {
            args['--continuous-log-conversionPattern'] = props.conversionPattern;
        }
        return args;
    }
    codeS3ObjectUrl(code) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_Code(code);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.codeS3ObjectUrl);
            }
            throw error;
        }
        const s3Location = code.bind(this, this.role).s3Location;
        return `s3://${s3Location.bucketName}/${s3Location.objectKey}`;
    }
}
exports.Job = Job;
_b = JSII_RTTI_SYMBOL_1;
Job[_b] = { fqn: "@aws-cdk/aws-glue-alpha.Job", version: "2.202.0-alpha.0" };
/**
 * Create a CloudWatch Metric that's based on Glue Job events
 * {@see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html#glue-event-types}
 * The metric has namespace = 'AWS/Events', metricName = 'TriggeredRules' and RuleName = rule.ruleName dimension.
 *
 * @param rule for use in setting RuleName dimension value
 * @param props metric properties
 */
function metricRule(rule, props) {
    return new cloudwatch.Metric({
        namespace: 'AWS/Events',
        metricName: 'TriggeredRules',
        dimensionsMap: { RuleName: rule.ruleName },
        statistic: cloudwatch.Stats.SUM,
        ...props,
    }).attachTo(rule);
}
//# sourceMappingURL=data:application/json;base64,