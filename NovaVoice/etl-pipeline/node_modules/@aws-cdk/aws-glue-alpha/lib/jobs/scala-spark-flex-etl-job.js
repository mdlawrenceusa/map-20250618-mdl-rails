"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalaSparkFlexEtlJob = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_glue_1 = require("aws-cdk-lib/aws-glue");
const constants_1 = require("../constants");
const spark_job_1 = require("./spark-job");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
const prop_injectable_1 = require("aws-cdk-lib/core/lib/prop-injectable");
/**
 * Spark ETL Jobs class
 *
 * ETL jobs support pySpark and Scala languages, for which there are separate
 * but similar constructors. ETL jobs default to the G2 worker type, but you
 * can override this default with other supported worker type values
 * (G1, G2, G4 and G8). ETL jobs defaults to Glue version 4.0, which you can
 * override to 3.0. The following ETL features are enabled by default:
 * —enable-metrics, —enable-spark-ui, —enable-continuous-cloudwatch-log.
 * You can find more details about version, worker type and other features
 * in Glue's public documentation.
 */
let ScalaSparkFlexEtlJob = class ScalaSparkFlexEtlJob extends spark_job_1.SparkJob {
    /**
     * ScalaSparkFlexEtlJob constructor
     */
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_ScalaSparkFlexEtlJobProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ScalaSparkFlexEtlJob);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        // Combine command line arguments into a single line item
        const defaultArguments = {
            ...this.executableArguments(props),
            ...this.nonExecutableCommonArguments(props),
        };
        const jobResource = new aws_glue_1.CfnJob(this, 'Resource', {
            name: props.jobName,
            description: props.description,
            role: this.role.roleArn,
            command: {
                name: constants_1.JobType.ETL,
                scriptLocation: this.codeS3ObjectUrl(props.script),
            },
            glueVersion: props.glueVersion ? props.glueVersion : constants_1.GlueVersion.V3_0,
            workerType: props.workerType ? props.workerType : constants_1.WorkerType.G_1X,
            numberOfWorkers: props.numberOfWorkers ? props.numberOfWorkers : 10,
            maxRetries: props.maxRetries,
            executionProperty: props.maxConcurrentRuns ? { maxConcurrentRuns: props.maxConcurrentRuns } : undefined,
            notificationProperty: props.notifyDelayAfter ? { notifyDelayAfter: props.notifyDelayAfter.toMinutes() } : undefined,
            timeout: props.timeout?.toMinutes(),
            connections: props.connections ? { connections: props.connections.map((connection) => connection.connectionName) } : undefined,
            securityConfiguration: props.securityConfiguration?.securityConfigurationName,
            tags: props.tags,
            executionClass: constants_1.ExecutionClass.FLEX,
            jobRunQueuingEnabled: false,
            defaultArguments,
        });
        const resourceName = this.getResourceNameAttribute(jobResource.ref);
        this.jobArn = this.buildJobArn(this, resourceName);
        this.jobName = resourceName;
    }
    /**
     * Set the executable arguments with best practices enabled by default
     *
     * @returns An array of arguments for Glue to use on execution
     */
    executableArguments(props) {
        const args = {};
        args['--job-language'] = constants_1.JobLanguage.SCALA;
        args['--class'] = props.className;
        this.setupExtraCodeArguments(args, props);
        return args;
    }
};
exports.ScalaSparkFlexEtlJob = ScalaSparkFlexEtlJob;
_a = JSII_RTTI_SYMBOL_1;
ScalaSparkFlexEtlJob[_a] = { fqn: "@aws-cdk/aws-glue-alpha.ScalaSparkFlexEtlJob", version: "2.202.0-alpha.0" };
/** Uniquely identifies this class. */
ScalaSparkFlexEtlJob.PROPERTY_INJECTION_ID = '@aws-cdk.aws-glue-alpha.ScalaSparkFlexEtlJob';
exports.ScalaSparkFlexEtlJob = ScalaSparkFlexEtlJob = __decorate([
    prop_injectable_1.propertyInjectable
], ScalaSparkFlexEtlJob);
//# sourceMappingURL=data:application/json;base64,