"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workflow = exports.WorkflowBase = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("aws-cdk-lib/core");
const aws_glue_1 = require("aws-cdk-lib/aws-glue");
const constants_1 = require("../constants");
const trigger_options_1 = require("./trigger-options");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
const prop_injectable_1 = require("aws-cdk-lib/core/lib/prop-injectable");
/**
 * Base abstract class for Workflow
 *
 * @see https://docs.aws.amazon.com/glue/latest/dg/about-triggers.html
 */
class WorkflowBase extends cdk.Resource {
    /**
     * Extract workflowName from arn
     */
    static extractNameFromArn(scope, workflowArn) {
        return cdk.Stack.of(scope).splitArn(workflowArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
    }
    /**
     * Add an on-demand trigger to the workflow.
     *
     * @param id The id of the trigger.
     * @param options Additional options for the trigger.
     * @throws If both job and crawler are provided, or if neither job nor crawler is provided.
     * @returns The created CfnTrigger resource.
     */
    addOnDemandTrigger(id, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_OnDemandTriggerOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addOnDemandTrigger);
            }
            throw error;
        }
        const trigger = new aws_glue_1.CfnTrigger(this, id, {
            ...options,
            workflowName: this.workflowName,
            type: 'ON_DEMAND',
            actions: options.actions?.map(this.renderAction.bind(this)),
            description: options.description || undefined,
        });
        return trigger;
    }
    /**
     * Add a daily-scheduled trigger to the workflow.
     *
     * @param id The id of the trigger.
     * @param options Additional options for the trigger.
     * @throws If both job and crawler are provided, or if neither job nor crawler is provided.
     * @returns The created CfnTrigger resource.
     */
    addDailyScheduledTrigger(id, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_DailyScheduleTriggerOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addDailyScheduledTrigger);
            }
            throw error;
        }
        const dailySchedule = trigger_options_1.TriggerSchedule.cron({
            minute: '0',
            hour: '0',
        });
        const trigger = new aws_glue_1.CfnTrigger(this, id, {
            ...options,
            workflowName: this.workflowName,
            type: 'SCHEDULED',
            actions: options.actions?.map(this.renderAction.bind(this)),
            schedule: dailySchedule.expressionString,
            startOnCreation: options.startOnCreation ?? false,
        });
        return trigger;
    }
    /**
     * Add a weekly-scheduled trigger to the workflow.
     *
     * @param id The id of the trigger.
     * @param options Additional options for the trigger.
     * @throws If both job and crawler are provided, or if neither job nor crawler is provided.
     * @returns The created CfnTrigger resource.
     */
    addWeeklyScheduledTrigger(id, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_WeeklyScheduleTriggerOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addWeeklyScheduledTrigger);
            }
            throw error;
        }
        const weeklySchedule = trigger_options_1.TriggerSchedule.cron({
            minute: '0',
            hour: '0',
            weekDay: 'SUN',
        });
        const trigger = new aws_glue_1.CfnTrigger(this, id, {
            ...options,
            workflowName: this.workflowName,
            type: 'SCHEDULED',
            actions: options.actions?.map(this.renderAction.bind(this)),
            schedule: weeklySchedule.expressionString,
            startOnCreation: options.startOnCreation ?? false,
        });
        return trigger;
    }
    /**
     * Add a custom-scheduled trigger to the workflow.
     *
     * @param id The id of the trigger.
     * @param options Additional options for the trigger.
     * @throws If both job and crawler are provided, or if neither job nor crawler is provided.
     * @returns The created CfnTrigger resource.
     */
    addCustomScheduledTrigger(id, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_CustomScheduledTriggerOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addCustomScheduledTrigger);
            }
            throw error;
        }
        const trigger = new aws_glue_1.CfnTrigger(this, id, {
            ...options,
            workflowName: this.workflowName,
            type: 'SCHEDULED',
            actions: options.actions?.map(this.renderAction.bind(this)),
            schedule: options.schedule.expressionString,
            startOnCreation: options.startOnCreation ?? false,
        });
        return trigger;
    }
    /**
     * Add an Event Bridge based trigger to the workflow.
     *
     * @param id The id of the trigger.
     * @param options Additional options for the trigger.
     * @throws If both job and crawler are provided, or if neither job nor crawler is provided.
     * @returns The created CfnTrigger resource.
     */
    addNotifyEventTrigger(id, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_NotifyEventTriggerOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addNotifyEventTrigger);
            }
            throw error;
        }
        const trigger = new aws_glue_1.CfnTrigger(this, id, {
            ...options,
            workflowName: this.workflowName,
            type: 'EVENT',
            actions: options.actions?.map(this.renderAction.bind(this)),
            eventBatchingCondition: this.renderEventBatchingCondition(options),
            description: options.description ?? undefined,
        });
        return trigger;
    }
    /**
     * Add a Condition (Predicate) based trigger to the workflow.
     *
     * @param id The id of the trigger.
     * @param options Additional options for the trigger.
     * @throws If both job and crawler are provided, or if neither job nor crawler is provided for any condition.
     * @throws If a job is provided without a job state, or if a crawler is provided without a crawler state for any condition.
     * @returns The created CfnTrigger resource.
     */
    addConditionalTrigger(id, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_ConditionalTriggerOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addConditionalTrigger);
            }
            throw error;
        }
        const trigger = new aws_glue_1.CfnTrigger(this, id, {
            ...options,
            workflowName: this.workflowName,
            type: 'CONDITIONAL',
            actions: options.actions?.map(this.renderAction.bind(this)),
            predicate: this.renderPredicate(options),
            eventBatchingCondition: this.renderEventBatchingCondition(options),
            description: options.description ?? undefined,
        });
        return trigger;
    }
    renderAction(action) {
        // Validate that either job or crawler is provided, but not both
        if (!action.job && !action.crawler) {
            throw new Error('You must provide either a job or a crawler for the action.');
        }
        else if (action.job && action.crawler) {
            throw new Error('You cannot provide both a job and a crawler for the action.');
        }
        return {
            jobName: action.job?.jobName,
            arguments: action.arguments,
            timeout: action.timeout?.toMinutes(),
            securityConfiguration: action.securityConfiguration?.securityConfigurationName,
            crawlerName: action.crawler?.name,
        };
    }
    renderPredicate(props) {
        const conditions = props.predicate.conditions?.map(condition => {
            // Validate that either job or crawler is provided, but not both
            if (!condition.job && !condition.crawlerName) {
                throw new Error('You must provide either a job or a crawler for the condition.');
            }
            else if (condition.job && condition.crawlerName) {
                throw new Error('You cannot provide both a job and a crawler for the condition.');
            }
            // Validate that if job is provided, job state is also provided
            if (condition.job && !condition.state) {
                throw new Error('If you provide a job for the condition, you must also provide a job state.');
            }
            // Validate that if crawler is provided, crawler state is also provided
            if (condition.crawlerName && !condition.crawlState) {
                throw new Error('If you provide a crawler for the condition, you must also provide a crawler state.');
            }
            return {
                logicalOperator: condition.logicalOperator ?? constants_1.ConditionLogicalOperator.EQUALS,
                jobName: condition.job?.jobName ?? undefined,
                state: condition.state ?? undefined,
                crawlerName: condition.crawlerName ?? undefined,
                crawlState: condition.crawlState ?? undefined,
            };
        });
        return {
            logical: props.predicate.conditions?.length === 1 ? undefined : props.predicate.logical ?? constants_1.PredicateLogical.AND,
            conditions: conditions,
        };
    }
    renderEventBatchingCondition(props) {
        const defaultBatchSize = 1;
        const defaultBatchWindow = cdk.Duration.seconds(900).toSeconds();
        if (!props.eventBatchingCondition) {
            return {
                batchSize: defaultBatchSize,
                batchWindow: defaultBatchWindow,
            };
        }
        return {
            batchSize: props.eventBatchingCondition.batchSize || defaultBatchSize,
            batchWindow: props.eventBatchingCondition.batchWindow?.toSeconds() || defaultBatchWindow,
        };
    }
    buildWorkflowArn(scope, workflowName) {
        return cdk.Stack.of(scope).formatArn({
            service: 'glue',
            resource: 'workflow',
            resourceName: workflowName,
        });
    }
}
exports.WorkflowBase = WorkflowBase;
_a = JSII_RTTI_SYMBOL_1;
WorkflowBase[_a] = { fqn: "@aws-cdk/aws-glue-alpha.WorkflowBase", version: "2.202.0-alpha.0" };
/**
 * This module defines a construct for creating and managing AWS Glue Workflows and Triggers.
 *
 * AWS Glue Workflows are orchestration services that allow you to create, manage, and monitor complex extract, transform, and load (ETL) activities involving multiple crawlers, jobs, and triggers. Workflows are designed to allow you to manage interdependent jobs and crawlers as a single unit, making it easier to orchestrate and monitor complex ETL pipelines.
 *
 * Triggers are used to initiate an AWS Glue Workflow. You can configure different types of triggers, such as on-demand, scheduled, event-based, or conditional triggers, to start your Workflow based on specific conditions or events.
 *
 * @see https://docs.aws.amazon.com/glue/latest/dg/workflows_overview.html
 * @see https://docs.aws.amazon.com/glue/latest/dg/about-triggers.html
 *
 * ## Usage Example
 *
 * ```ts
 * const app = new App();
 * const stack = new Stack(app, 'TestStack');
 *
 * // Create a Glue Job
 * declare const role: iam.IRole;
 * declare const script: glue.Code;
 * const job = new glue.PySparkStreamingJob(stack, 'ImportedJob', { role, script });
 *
 * // Create a Glue Workflow
 * const workflow = new glue.Workflow(stack, 'TestWorkflow');
 *
 * // Add an on-demand trigger to the Workflow
 * workflow.addOnDemandTrigger('OnDemandTrigger', {
 *   actions: [{ job: job }],
 * });
 * ```
 */
let Workflow = class Workflow extends WorkflowBase {
    /**
     * Import a workflow from its name
     */
    static fromWorkflowName(scope, id, workflowName) {
        return this.fromWorkflowAttributes(scope, id, {
            workflowName,
        });
    }
    /**
     * Import an workflow from it's name
     */
    static fromWorkflowArn(scope, id, workflowArn) {
        return this.fromWorkflowAttributes(scope, id, {
            workflowName: this.extractNameFromArn(scope, workflowArn),
            workflowArn,
        });
    }
    /**
     * Import an existing workflow
     */
    static fromWorkflowAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_WorkflowAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromWorkflowAttributes);
            }
            throw error;
        }
        class Import extends WorkflowBase {
            constructor() {
                super(...arguments);
                this.workflowName = attrs.workflowName;
                this.workflowArn = this.buildWorkflowArn(scope, this.workflowName);
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props?.workflowName,
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_WorkflowProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Workflow);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        const resource = new aws_glue_1.CfnWorkflow(this, 'Resource', {
            name: this.physicalName,
            description: props?.description,
            defaultRunProperties: props?.defaultRunProperties,
            maxConcurrentRuns: props?.maxConcurrentRuns,
        });
        this.workflowName = this.getResourceNameAttribute(resource.ref);
        this.workflowArn = this.buildWorkflowArn(this, this.workflowName);
    }
};
exports.Workflow = Workflow;
_b = JSII_RTTI_SYMBOL_1;
Workflow[_b] = { fqn: "@aws-cdk/aws-glue-alpha.Workflow", version: "2.202.0-alpha.0" };
/** Uniquely identifies this class. */
Workflow.PROPERTY_INJECTION_ID = '@aws-cdk.aws-glue-alpha.Workflow';
exports.Workflow = Workflow = __decorate([
    prop_injectable_1.propertyInjectable
], Workflow);
//# sourceMappingURL=data:application/json;base64,