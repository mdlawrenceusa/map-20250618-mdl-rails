"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TriggerSchedule = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const events = require("aws-cdk-lib/aws-events");
/**
 * Represents a trigger schedule.
 */
class TriggerSchedule {
    /**
     * Creates a new TriggerSchedule instance with a cron expression.
     *
     * @param options The cron options for the schedule.
     * @returns A new TriggerSchedule instance.
     */
    static cron(options) {
        return new TriggerSchedule(events.Schedule.cron(options).expressionString);
    }
    /**
     * Creates a new TriggerSchedule instance with a custom expression.
     *
     * @param expression The custom expression for the schedule.
     * @returns A new TriggerSchedule instance.
     */
    static expression(expression) {
        return new TriggerSchedule(expression);
    }
    /**
     * @param expressionString The expression string for the schedule.
     */
    constructor(expressionString) {
        this.expressionString = expressionString;
    }
}
exports.TriggerSchedule = TriggerSchedule;
_a = JSII_RTTI_SYMBOL_1;
TriggerSchedule[_a] = { fqn: "@aws-cdk/aws-glue-alpha.TriggerSchedule", version: "2.202.0-alpha.0" };
//# sourceMappingURL=data:application/json;base64,