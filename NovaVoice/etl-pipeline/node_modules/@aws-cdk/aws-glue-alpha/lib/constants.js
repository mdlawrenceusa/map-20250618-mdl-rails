"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrawlerState = exports.ConditionLogicalOperator = exports.PredicateLogical = exports.MaxCapacity = exports.JobType = exports.Runtime = exports.PythonVersion = exports.JobLanguage = exports.GlueVersion = exports.ExecutionClass = exports.MetricType = exports.JobState = exports.WorkerType = void 0;
/**
 * The type of predefined worker that is allocated when a job runs.
 *
 * If you need to use a WorkerType that doesn't exist as a static member, you
 * can instantiate a `WorkerType` object, e.g: `WorkerType.of('other type')`
 */
var WorkerType;
(function (WorkerType) {
    /**
     * Standard Worker Type
     * 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
     */
    WorkerType["STANDARD"] = "Standard";
    /**
     * G.1X Worker Type
     * 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. Suitable for memory-intensive jobs.
     */
    WorkerType["G_1X"] = "G.1X";
    /**
     * G.2X Worker Type
     * 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. Suitable for memory-intensive jobs.
     */
    WorkerType["G_2X"] = "G.2X";
    /**
     * G.4X Worker Type
     * 4 DPU (16 vCPU, 64 GB of memory, 256 GB disk), and provides 1 executor per worker.
     * We recommend this worker type for jobs whose workloads contain your most demanding transforms,
     * aggregations, joins, and queries. This worker type is available only for AWS Glue version 3.0 or later jobs.
     */
    WorkerType["G_4X"] = "G.4X";
    /**
     * G.8X Worker Type
     * 8 DPU (32 vCPU, 128 GB of memory, 512 GB disk), and provides 1 executor per worker. We recommend this worker
     * type for jobs whose workloads contain your most demanding transforms, aggregations, joins, and queries.
     * This worker type is available only for AWS Glue version 3.0 or later jobs.
     */
    WorkerType["G_8X"] = "G.8X";
    /**
     * G.025X Worker Type
     * 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. Suitable for low volume streaming jobs.
     */
    WorkerType["G_025X"] = "G.025X";
    /**
     * Z.2X Worker Type
     */
    WorkerType["Z_2X"] = "Z.2X";
})(WorkerType || (exports.WorkerType = WorkerType = {}));
/**
 * The number of workers of a defined workerType that are allocated when a job runs.
 *
 * @see https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html
 */
/**
 * Job states emitted by Glue to CloudWatch Events.
 *
 * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html#glue-event-types for more information.
 */
var JobState;
(function (JobState) {
    /**
     * State indicating job run succeeded
     */
    JobState["SUCCEEDED"] = "SUCCEEDED";
    /**
     * State indicating job run failed
     */
    JobState["FAILED"] = "FAILED";
    /**
     * State indicating job run timed out
     */
    JobState["TIMEOUT"] = "TIMEOUT";
    /**
     * State indicating job is starting
     */
    JobState["STARTING"] = "STARTING";
    /**
     * State indicating job is running
     */
    JobState["RUNNING"] = "RUNNING";
    /**
     * State indicating job is stopping
     */
    JobState["STOPPING"] = "STOPPING";
    /**
     * State indicating job stopped
     */
    JobState["STOPPED"] = "STOPPED";
})(JobState || (exports.JobState = JobState = {}));
/**
 * The Glue CloudWatch metric type.
 *
 * @see https://docs.aws.amazon.com/glue/latest/dg/monitoring-awsglue-with-cloudwatch-metrics.html
 */
var MetricType;
(function (MetricType) {
    /**
     * A value at a point in time.
     */
    MetricType["GAUGE"] = "gauge";
    /**
     * An aggregate number.
     */
    MetricType["COUNT"] = "count";
})(MetricType || (exports.MetricType = MetricType = {}));
/**
 * The ExecutionClass whether the job is run with a standard or flexible execution class.
 *
 * @see https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html#aws-glue-api-jobs-job-Job
 * @see https://docs.aws.amazon.com/glue/latest/dg/add-job.html
 */
var ExecutionClass;
(function (ExecutionClass) {
    /**
     * The flexible execution class is appropriate for time-insensitive jobs whose start
     * and completion times may vary.
     */
    ExecutionClass["FLEX"] = "FLEX";
    /**
     * The standard execution class is ideal for time-sensitive workloads that require fast job
     * startup and dedicated resources.
     */
    ExecutionClass["STANDARD"] = "STANDARD";
})(ExecutionClass || (exports.ExecutionClass = ExecutionClass = {}));
/**
 * AWS Glue version determines the versions of Apache Spark and Python that are available to the job.
 *
 * @see https://docs.aws.amazon.com/glue/latest/dg/add-job.html.
 */
var GlueVersion;
(function (GlueVersion) {
    /**
     * Glue version using Spark 2.2.1 and Python 2.7
     */
    GlueVersion["V0_9"] = "0.9";
    /**
     * Glue version using Spark 2.4.3, Python 2.7 and Python 3.6
     */
    GlueVersion["V1_0"] = "1.0";
    /**
     * Glue version using Spark 2.4.3 and Python 3.7
     */
    GlueVersion["V2_0"] = "2.0";
    /**
     * Glue version using Spark 3.1.1 and Python 3.7
     */
    GlueVersion["V3_0"] = "3.0";
    /**
     * Glue version using Spark 3.3.0 and Python 3.10
     */
    GlueVersion["V4_0"] = "4.0";
    /**
     * Glue version using Spark 3.5.2 and Python 3.11
     */
    GlueVersion["V5_0"] = "5.0";
})(GlueVersion || (exports.GlueVersion = GlueVersion = {}));
/**
 * Runtime language of the Glue job
 */
var JobLanguage;
(function (JobLanguage) {
    /**
     * Scala
     */
    JobLanguage["SCALA"] = "scala";
    /**
     * Python
     */
    JobLanguage["PYTHON"] = "python";
})(JobLanguage || (exports.JobLanguage = JobLanguage = {}));
/**
 * Python version
 */
var PythonVersion;
(function (PythonVersion) {
    /**
     * Python 2 (the exact version depends on GlueVersion and JobCommand used)
     */
    PythonVersion["TWO"] = "2";
    /**
     * Python 3 (the exact version depends on GlueVersion and JobCommand used)
     */
    PythonVersion["THREE"] = "3";
    /**
     * Python 3.9 (the exact version depends on GlueVersion and JobCommand used)
     */
    PythonVersion["THREE_NINE"] = "3.9";
})(PythonVersion || (exports.PythonVersion = PythonVersion = {}));
/**
 * AWS Glue runtime determines the runtime engine of the job.
 *
 */
var Runtime;
(function (Runtime) {
    /**
     * Runtime for a Glue for Ray 2.4.
     */
    Runtime["RAY_TWO_FOUR"] = "Ray2.4";
})(Runtime || (exports.Runtime = Runtime = {}));
/**
 * The job type.
 *
 * If you need to use a JobType that doesn't exist as a static member, you
 * can instantiate a `JobType` object, e.g: `JobType.of('other name')`.
 */
var JobType;
(function (JobType) {
    /**
     * Command for running a Glue Spark job.
     */
    JobType["ETL"] = "glueetl";
    /**
     * Command for running a Glue Spark streaming job.
     */
    JobType["STREAMING"] = "gluestreaming";
    /**
     * Command for running a Glue python shell job.
     */
    JobType["PYTHON_SHELL"] = "pythonshell";
    /**
     * Command for running a Glue Ray job.
     */
    JobType["RAY"] = "glueray";
})(JobType || (exports.JobType = JobType = {}));
/**
 * The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
 */
var MaxCapacity;
(function (MaxCapacity) {
    /**
     * DPU value of 1/16th
     */
    MaxCapacity[MaxCapacity["DPU_1_16TH"] = 0.0625] = "DPU_1_16TH";
    /**
     * DPU value of 1
     */
    MaxCapacity[MaxCapacity["DPU_1"] = 1] = "DPU_1";
})(MaxCapacity || (exports.MaxCapacity = MaxCapacity = {}));
/*
 * Represents the logical operator for combining multiple conditions in the Glue Trigger API.
 */
var PredicateLogical;
(function (PredicateLogical) {
    /**
     * All conditions must be true for the predicate to be true.
     */
    PredicateLogical["AND"] = "AND";
    /**
     * At least one condition must be true for the predicate to be true.
     */
    PredicateLogical["ANY"] = "ANY";
})(PredicateLogical || (exports.PredicateLogical = PredicateLogical = {}));
/**
 * Represents the logical operator for evaluating a single condition in the Glue Trigger API.
 */
var ConditionLogicalOperator;
(function (ConditionLogicalOperator) {
    /** The condition is true if the values are equal. */
    ConditionLogicalOperator["EQUALS"] = "EQUALS";
})(ConditionLogicalOperator || (exports.ConditionLogicalOperator = ConditionLogicalOperator = {}));
/**
 * Represents the state of a crawler for a condition in the Glue Trigger API.
 */
var CrawlerState;
(function (CrawlerState) {
    /** The crawler is currently running. */
    CrawlerState["RUNNING"] = "RUNNING";
    /** The crawler is in the process of being cancelled. */
    CrawlerState["CANCELLING"] = "CANCELLING";
    /** The crawler has been cancelled. */
    CrawlerState["CANCELLED"] = "CANCELLED";
    /** The crawler has completed its operation successfully. */
    CrawlerState["SUCCEEDED"] = "SUCCEEDED";
    /** The crawler has failed to complete its operation. */
    CrawlerState["FAILED"] = "FAILED";
    /** The crawler encountered an error during its operation. */
    CrawlerState["ERROR"] = "ERROR";
})(CrawlerState || (exports.CrawlerState = CrawlerState = {}));
//# sourceMappingURL=data:application/json;base64,