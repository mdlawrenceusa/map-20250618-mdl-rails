"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a, _b;
var Connection_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = exports.ConnectionType = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("aws-cdk-lib/core");
const aws_glue_1 = require("aws-cdk-lib/aws-glue");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
const prop_injectable_1 = require("aws-cdk-lib/core/lib/prop-injectable");
/**
 * The type of the glue connection
 *
 * If you need to use a connection type that doesn't exist as a static member, you
 * can instantiate a `ConnectionType` object, e.g: `new ConnectionType('NEW_TYPE')`.
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-glue-connection-connectioninput.html#cfn-glue-connection-connectioninput-connectiontype
 */
class ConnectionType {
    constructor(name) {
        this.name = name;
    }
    /**
     * The connection type name as expected by Connection resource.
     */
    toString() {
        return this.name;
    }
}
exports.ConnectionType = ConnectionType;
_a = JSII_RTTI_SYMBOL_1;
ConnectionType[_a] = { fqn: "@aws-cdk/aws-glue-alpha.ConnectionType", version: "2.202.0-alpha.0" };
/**
 * Designates a connection to a database through Java Database Connectivity (JDBC).
 */
ConnectionType.JDBC = new ConnectionType('JDBC');
/**
 * Designates a connection to an Apache Kafka streaming platform.
 */
ConnectionType.KAFKA = new ConnectionType('KAFKA');
/**
 * Designates a connection to a MongoDB document database.
 */
ConnectionType.MONGODB = new ConnectionType('MONGODB');
/**
 * Designates a connection used for view validation by Amazon Redshift.
 */
ConnectionType.VIEW_VALIDATION_REDSHIFT = new ConnectionType('VIEW_VALIDATION_REDSHIFT');
/**
 * Designates a connection used for view validation by Amazon Athena.
 */
ConnectionType.VIEW_VALIDATION_ATHENA = new ConnectionType('VIEW_VALIDATION_ATHENA');
/**
 * Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).
 */
ConnectionType.NETWORK = new ConnectionType('NETWORK');
/**
 * Uses configuration settings contained in a connector purchased from AWS Marketplace
 * to read from and write to data stores that are not natively supported by AWS Glue.
 */
ConnectionType.MARKETPLACE = new ConnectionType('MARKETPLACE');
/**
 * Uses configuration settings contained in a custom connector to read from and write to data stores
 * that are not natively supported by AWS Glue.
 */
ConnectionType.CUSTOM = new ConnectionType('CUSTOM');
/**
 * Designates a connection to Facebook Ads.
 */
ConnectionType.FACEBOOKADS = new ConnectionType('FACEBOOKADS');
/**
 * Designates a connection to Google Ads.
 */
ConnectionType.GOOGLEADS = new ConnectionType('GOOGLEADS');
/**
 * Designates a connection to Google Sheets.
 */
ConnectionType.GOOGLESHEETS = new ConnectionType('GOOGLESHEETS');
/**
 * Designates a connection to Google Analytics 4.
 */
ConnectionType.GOOGLEANALYTICS4 = new ConnectionType('GOOGLEANALYTICS4');
/**
 * Designates a connection to HubSpot.
 */
ConnectionType.HUBSPOT = new ConnectionType('HUBSPOT');
/**
 * Designates a connection to Instagram Ads.
 */
ConnectionType.INSTAGRAMADS = new ConnectionType('INSTAGRAMADS');
/**
 * Designates a connection to Intercom.
 */
ConnectionType.INTERCOM = new ConnectionType('INTERCOM');
/**
 * Designates a connection to Jira Cloud.
 */
ConnectionType.JIRACLOUD = new ConnectionType('JIRACLOUD');
/**
 * Designates a connection to Adobe Marketo Engage.
 */
ConnectionType.MARKETO = new ConnectionType('MARKETO');
/**
 * Designates a connection to Oracle NetSuite.
 */
ConnectionType.NETSUITEERP = new ConnectionType('NETSUITEERP');
/**
 * Designates a connection to Salesforce using OAuth authentication.
 */
ConnectionType.SALESFORCE = new ConnectionType('SALESFORCE');
/**
 * Designates a connection to Salesforce Marketing Cloud.
 */
ConnectionType.SALESFORCEMARKETINGCLOUD = new ConnectionType('SALESFORCEMARKETINGCLOUD');
/**
 * Designates a connection to Salesforce Marketing Cloud Account Engagement (MCAE).
 */
ConnectionType.SALESFORCEPARDOT = new ConnectionType('SALESFORCEPARDOT');
/**
 * Designates a connection to SAP OData.
 */
ConnectionType.SAPODATA = new ConnectionType('SAPODATA');
/**
 * Designates a connection to ServiceNow.
 */
ConnectionType.SERVICENOW = new ConnectionType('SERVICENOW');
/**
 * Designates a connection to Slack.
 */
ConnectionType.SLACK = new ConnectionType('SLACK');
/**
 * Designates a connection to Snapchat Ads.
 */
ConnectionType.SNAPCHATADS = new ConnectionType('SNAPCHATADS');
/**
 * Designates a connection to Stripe.
 */
ConnectionType.STRIPE = new ConnectionType('STRIPE');
/**
 * Designates a connection to Zendesk.
 */
ConnectionType.ZENDESK = new ConnectionType('ZENDESK');
/**
 * Designates a connection to Zoho CRM.
 */
ConnectionType.ZOHOCRM = new ConnectionType('ZOHOCRM');
/**
 * An AWS Glue connection to a data source.
 */
let Connection = Connection_1 = class Connection extends cdk.Resource {
    /**
     * Creates a Connection construct that represents an external connection.
     *
     * @param scope The scope creating construct (usually `this`).
     * @param id The construct's id.
     * @param connectionArn arn of external connection.
     */
    static fromConnectionArn(scope, id, connectionArn) {
        class Import extends cdk.Resource {
            constructor() {
                super(...arguments);
                this.connectionName = cdk.Arn.extractResourceName(connectionArn, 'connection');
                this.connectionArn = connectionArn;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Creates a Connection construct that represents an external connection.
     *
     * @param scope The scope creating construct (usually `this`).
     * @param id The construct's id.
     * @param connectionName name of external connection.
     */
    static fromConnectionName(scope, id, connectionName) {
        class Import extends cdk.Resource {
            constructor() {
                super(...arguments);
                this.connectionName = connectionName;
                this.connectionArn = Connection_1.buildConnectionArn(scope, connectionName);
            }
        }
        return new Import(scope, id);
    }
    static buildConnectionArn(scope, connectionName) {
        return cdk.Stack.of(scope).formatArn({
            service: 'glue',
            resource: 'connection',
            resourceName: connectionName,
        });
    }
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.connectionName,
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_ConnectionProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, Connection);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        this.properties = props.properties || {};
        const physicalConnectionRequirements = props.subnet || props.securityGroups ? {
            availabilityZone: props.subnet ? props.subnet.availabilityZone : undefined,
            subnetId: props.subnet ? props.subnet.subnetId : undefined,
            securityGroupIdList: props.securityGroups ? props.securityGroups.map(sg => sg.securityGroupId) : undefined,
        } : undefined;
        const connectionResource = new aws_glue_1.CfnConnection(this, 'Resource', {
            catalogId: cdk.Stack.of(this).account,
            connectionInput: {
                connectionProperties: cdk.Lazy.any({ produce: () => Object.keys(this.properties).length > 0 ? this.properties : undefined }),
                connectionType: props.type.name,
                description: props.description,
                matchCriteria: props.matchCriteria,
                name: props.connectionName,
                physicalConnectionRequirements,
            },
        });
        const resourceName = this.getResourceNameAttribute(connectionResource.ref);
        this.connectionArn = Connection_1.buildConnectionArn(this, resourceName);
        this.connectionName = resourceName;
    }
    /**
     * Add additional connection parameters
     * @param key parameter key
     * @param value parameter value
     */
    addProperty(key, value) {
        this.properties[key] = value;
    }
};
exports.Connection = Connection;
_b = JSII_RTTI_SYMBOL_1;
Connection[_b] = { fqn: "@aws-cdk/aws-glue-alpha.Connection", version: "2.202.0-alpha.0" };
/** Uniquely identifies this class. */
Connection.PROPERTY_INJECTION_ID = '@aws-cdk.aws-glue-alpha.Connection';
__decorate([
    (0, metadata_resource_1.MethodMetadata)()
], Connection.prototype, "addProperty", null);
exports.Connection = Connection = Connection_1 = __decorate([
    prop_injectable_1.propertyInjectable
], Connection);
//# sourceMappingURL=data:application/json;base64,