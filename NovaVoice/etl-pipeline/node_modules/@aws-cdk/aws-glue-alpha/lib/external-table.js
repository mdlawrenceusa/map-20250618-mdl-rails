"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalTable = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_glue_1 = require("aws-cdk-lib/aws-glue");
const table_base_1 = require("./table-base");
const metadata_resource_1 = require("aws-cdk-lib/core/lib/metadata-resource");
const prop_injectable_1 = require("aws-cdk-lib/core/lib/prop-injectable");
/**
 * A Glue table that targets an external data location (e.g. A table in a Redshift Cluster).
 * @resource AWS::Glue::Table
 */
let ExternalTable = class ExternalTable extends table_base_1.TableBase {
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_glue_alpha_ExternalTableProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ExternalTable);
            }
            throw error;
        }
        // Enhanced CDK Analytics Telemetry
        (0, metadata_resource_1.addConstructMetadata)(this, props);
        this.connection = props.connection;
        this.tableResource = new aws_glue_1.CfnTable(this, 'Table', {
            catalogId: props.database.catalogId,
            databaseName: props.database.databaseName,
            tableInput: {
                name: this.physicalName,
                description: props.description || `${this.physicalName} generated by CDK`,
                partitionKeys: renderColumns(props.partitionKeys),
                parameters: {
                    'classification': props.dataFormat.classificationString?.value,
                    'has_encrypted_data': true,
                    'partition_filtering.enabled': props.enablePartitionFiltering,
                    'connectionName': props.connection.connectionName,
                    ...props.parameters,
                },
                storageDescriptor: {
                    location: props.externalDataLocation,
                    compressed: this.compressed,
                    storedAsSubDirectories: props.storedAsSubDirectories ?? false,
                    columns: renderColumns(props.columns),
                    inputFormat: props.dataFormat.inputFormat.className,
                    outputFormat: props.dataFormat.outputFormat.className,
                    serdeInfo: {
                        serializationLibrary: props.dataFormat.serializationLibrary.className,
                    },
                    parameters: props.storageParameters ? props.storageParameters.reduce((acc, param) => {
                        if (param.key in acc) {
                            throw new Error(`Duplicate storage parameter key: ${param.key}`);
                        }
                        const key = param.key;
                        acc[key] = param.value;
                        return acc;
                    }, {}) : undefined,
                },
                tableType: 'EXTERNAL_TABLE',
            },
        });
        this.tableName = this.getResourceNameAttribute(this.tableResource.ref);
        this.tableArn = this.stack.formatArn({
            service: 'glue',
            resource: 'table',
            resourceName: `${this.database.databaseName}/${this.tableName}`,
        });
        this.node.defaultChild = this.tableResource;
        // Partition index creation relies on created table.
        if (props.partitionIndexes) {
            this.partitionIndexes = props.partitionIndexes;
            this.partitionIndexes.forEach((index) => this.addPartitionIndex(index));
        }
    }
    /**
     * Grant read permissions to the table
     *
     * @param grantee the principal
     */
    grantRead(grantee) {
        const ret = this.grant(grantee, readPermissions);
        return ret;
    }
    /**
     * Grant write permissions to the table
     *
     * @param grantee the principal
     */
    grantWrite(grantee) {
        const ret = this.grant(grantee, writePermissions);
        return ret;
    }
    /**
     * Grant read and write permissions to the table
     *
     * @param grantee the principal
     */
    grantReadWrite(grantee) {
        const ret = this.grant(grantee, [...readPermissions, ...writePermissions]);
        return ret;
    }
};
exports.ExternalTable = ExternalTable;
_a = JSII_RTTI_SYMBOL_1;
ExternalTable[_a] = { fqn: "@aws-cdk/aws-glue-alpha.ExternalTable", version: "2.202.0-alpha.0" };
/** Uniquely identifies this class. */
ExternalTable.PROPERTY_INJECTION_ID = '@aws-cdk.aws-glue-alpha.ExternalTable';
__decorate([
    (0, metadata_resource_1.MethodMetadata)()
], ExternalTable.prototype, "grantRead", null);
__decorate([
    (0, metadata_resource_1.MethodMetadata)()
], ExternalTable.prototype, "grantWrite", null);
__decorate([
    (0, metadata_resource_1.MethodMetadata)()
], ExternalTable.prototype, "grantReadWrite", null);
exports.ExternalTable = ExternalTable = __decorate([
    prop_injectable_1.propertyInjectable
], ExternalTable);
const readPermissions = [
    'glue:BatchGetPartition',
    'glue:GetPartition',
    'glue:GetPartitions',
    'glue:GetTable',
    'glue:GetTables',
    'glue:GetTableVersion',
    'glue:GetTableVersions',
];
const writePermissions = [
    'glue:BatchCreatePartition',
    'glue:BatchDeletePartition',
    'glue:CreatePartition',
    'glue:DeletePartition',
    'glue:UpdatePartition',
];
function renderColumns(columns) {
    if (columns === undefined) {
        return undefined;
    }
    return columns.map(column => {
        return {
            name: column.name,
            type: column.type.inputString,
            comment: column.comment,
        };
    });
}
//# sourceMappingURL=data:application/json;base64,